// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
package iter

type Uint16Iterator interface {
	// HasNext checks if there is the next item
	// in the iterator. HasNext should be idempotent.
	HasNext() bool
	// Next should be invoked after check HasNext.
	Next() uint16
	// Err contains first met error while Next.
	Err() error
}

type emptyUint16Iterator struct{}

func (emptyUint16Iterator) HasNext() bool       { return false }
func (emptyUint16Iterator) Next() (next uint16) { return 0 }
func (emptyUint16Iterator) Err() error          { return nil }

var EmptyUint16Iterator = emptyUint16Iterator{}

type Uint16IterMaker interface {
	MakeIter() (Uint16Iterator, error)
}

type MakeUint16Iter func() (Uint16Iterator, error)

func (m MakeUint16Iter) MakeIter() (Uint16Iterator, error) { return m() }

var MakeNoUint16Iter = MakeUint16Iter(func() (Uint16Iterator, error) { return EmptyUint16Iterator, nil })

// Uint16Discard just range over all items and do nothing with each of them.
func Uint16Discard(items Uint16Iterator) error {
	if items == nil {
		return nil
	}
	for items.HasNext() {
		_ = items.Next()
	}
	// no error wrapping since no additional context for the error; just return it.
	return items.Err()
}
