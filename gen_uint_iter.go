// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
package iter

type UintIterator interface {
	// HasNext checks if there is the next item
	// in the iterator. HasNext should be idempotent.
	HasNext() bool
	// Next should be invoked after check HasNext.
	Next() uint
	// Err contains first met error while Next.
	Err() error
}

type emptyUintIterator struct{}

func (emptyUintIterator) HasNext() bool     { return false }
func (emptyUintIterator) Next() (next uint) { return 0 }
func (emptyUintIterator) Err() error        { return nil }

var EmptyUintIterator = emptyUintIterator{}

type UintIterMaker interface {
	MakeIter() (UintIterator, error)
}

type MakeUintIter func() (UintIterator, error)

func (m MakeUintIter) MakeIter() (UintIterator, error) { return m() }

var MakeNoUintIter = MakeUintIter(func() (UintIterator, error) { return EmptyUintIterator, nil })

// UintDiscard just range over all items and do nothing with each of them.
func UintDiscard(items UintIterator) error {
	if items == nil {
		return nil
	}
	for items.HasNext() {
		_ = items.Next()
	}
	// no error wrapping since no additional context for the error; just return it.
	return items.Err()
}
