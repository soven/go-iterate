// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
package iter

type Uint32Iterator interface {
	// HasNext checks if there is the next item
	// in the iterator. HasNext should be idempotent.
	HasNext() bool
	// Next should be invoked after check HasNext.
	Next() uint32
	// Err contains first met error while Next.
	Err() error
}

type emptyUint32Iterator struct{}

func (emptyUint32Iterator) HasNext() bool       { return false }
func (emptyUint32Iterator) Next() (next uint32) { return 0 }
func (emptyUint32Iterator) Err() error          { return nil }

var EmptyUint32Iterator = emptyUint32Iterator{}

type Uint32IterMaker interface {
	MakeIter() (Uint32Iterator, error)
}

type MakeUint32Iter func() (Uint32Iterator, error)

func (m MakeUint32Iter) MakeIter() (Uint32Iterator, error) { return m() }

var MakeNoUint32Iter = MakeUint32Iter(func() (Uint32Iterator, error) { return EmptyUint32Iterator, nil })

// Uint32Discard just range over all items and do nothing with each of them.
func Uint32Discard(items Uint32Iterator) error {
	if items == nil {
		return nil
	}
	for items.HasNext() {
		_ = items.Next()
	}
	// no error wrapping since no additional context for the error; just return it.
	return items.Err()
}
