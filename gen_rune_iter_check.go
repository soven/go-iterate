// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
package iter

import "github.com/pkg/errors"

type RuneChecker interface {
	// It is suggested to return EndOfRuneIterator to stop iteration.
	Check(rune) (bool, error)
}

type RuneCheck func(rune) (bool, error)

func (ch RuneCheck) Check(item rune) (bool, error) { return ch(item) }

var (
	AlwaysRuneCheckTrue  = RuneCheck(func(item rune) (bool, error) { return true, nil })
	AlwaysRuneCheckFalse = RuneCheck(func(item rune) (bool, error) { return false, nil })
)

func NotRune(checker RuneChecker) RuneChecker {
	if checker == nil {
		return AlwaysRuneCheckTrue
	}
	return RuneCheck(func(item rune) (bool, error) {
		yes, err := checker.Check(item)
		if err != nil {
			// No error wrapping since an error context is missing.
			return false, err
		}

		return !yes, nil
	})
}

type andRune struct {
	lhs, rhs RuneChecker
}

func (a andRune) Check(item rune) (bool, error) {
	isLHSPassed, err := a.lhs.Check(item)
	if err != nil {
		return false, wrapIfNotEndOfRuneIterator(err, "lhs check")
	}
	if !isLHSPassed {
		return false, nil
	}

	isRHSPassed, err := a.rhs.Check(item)
	if err != nil {
		return false, wrapIfNotEndOfRuneIterator(err, "rhs check")
	}
	return isRHSPassed, nil
}

func AllRune(checkers ...RuneChecker) RuneChecker {
	var all RuneChecker = AlwaysRuneCheckTrue
	for i := len(checkers) - 1; i >= 0; i-- {
		if checkers[i] == nil {
			continue
		}
		all = andRune{checkers[i], all}
	}
	return all
}

type orRune struct {
	lhs, rhs RuneChecker
}

func (o orRune) Check(item rune) (bool, error) {
	isLHSPassed, err := o.lhs.Check(item)
	if err != nil {
		return false, wrapIfNotEndOfRuneIterator(err, "lhs check")
	}
	if isLHSPassed {
		return true, nil
	}

	isRHSPassed, err := o.rhs.Check(item)
	if err != nil {
		return false, wrapIfNotEndOfRuneIterator(err, "rhs check")
	}
	return isRHSPassed, nil
}

func AnyRune(checkers ...RuneChecker) RuneChecker {
	var any RuneChecker = AlwaysRuneCheckFalse
	for i := len(checkers) - 1; i >= 0; i-- {
		if checkers[i] == nil {
			continue
		}
		any = orRune{checkers[i], any}
	}
	return any
}

type FilteringRuneIterator struct {
	preparedRuneItem
	filter RuneChecker
}

func (it *FilteringRuneIterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	for it.preparedRuneItem.HasNext() {
		next := it.base.Next()
		isFilterPassed, err := it.filter.Check(next)
		if err != nil {
			if !isEndOfRuneIterator(err) {
				err = errors.Wrap(err, "filtering iterator: check")
			}
			it.err = err
			return false
		}

		if !isFilterPassed {
			continue
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// RuneFiltering sets filter while iterating over items.
// If filters is empty, so all items will return.
func RuneFiltering(items RuneIterator, filters ...RuneChecker) RuneIterator {
	if items == nil {
		return EmptyRuneIterator
	}
	return &FilteringRuneIterator{preparedRuneItem{base: items}, AllRune(filters...)}
}

func RuneFilter(items RuneIterator, checker ...RuneChecker) error {
	// no error wrapping since no additional context for the error; just return it.
	return RuneDiscard(RuneFiltering(items, checker...))
}

type RuneEnumChecker interface {
	// It is suggested to return EndOfRuneIterator to stop iteration.
	Check(int, rune) (bool, error)
}

type RuneEnumCheck func(int, rune) (bool, error)

func (ch RuneEnumCheck) Check(n int, item rune) (bool, error) { return ch(n, item) }

type enumFromRuneChecker struct {
	RuneChecker
}

func (ch enumFromRuneChecker) Check(_ int, item rune) (bool, error) {
	return ch.RuneChecker.Check(item)
}

func EnumFromRuneChecker(checker RuneChecker) RuneEnumChecker {
	return &enumFromRuneChecker{checker}
}

var (
	AlwaysRuneEnumCheckTrue  = EnumFromRuneChecker(AlwaysRuneCheckTrue)
	AlwaysRuneEnumCheckFalse = EnumFromRuneChecker(AlwaysRuneCheckFalse)
)

func EnumNotRune(checker RuneEnumChecker) RuneEnumChecker {
	if checker == nil {
		return AlwaysRuneEnumCheckTrue
	}
	return RuneEnumCheck(func(n int, item rune) (bool, error) {
		yes, err := checker.Check(n, item)
		if err != nil {
			// No error wrapping since an error context is missing.
			return false, err
		}

		return !yes, nil
	})
}

type enumAndRune struct {
	lhs, rhs RuneEnumChecker
}

func (a enumAndRune) Check(n int, item rune) (bool, error) {
	isLHSPassed, err := a.lhs.Check(n, item)
	if err != nil {
		return false, wrapIfNotEndOfRuneIterator(err, "lhs check")
	}
	if !isLHSPassed {
		return false, nil
	}

	isRHSPassed, err := a.rhs.Check(n, item)
	if err != nil {
		return false, wrapIfNotEndOfRuneIterator(err, "rhs check")
	}
	return isRHSPassed, nil
}

func EnumAllRune(checkers ...RuneEnumChecker) RuneEnumChecker {
	var all RuneEnumChecker = AlwaysRuneEnumCheckTrue
	for i := len(checkers) - 1; i >= 0; i-- {
		if checkers[i] == nil {
			continue
		}
		all = enumAndRune{checkers[i], all}
	}
	return all
}

type enumOrRune struct {
	lhs, rhs RuneEnumChecker
}

func (o enumOrRune) Check(n int, item rune) (bool, error) {
	isLHSPassed, err := o.lhs.Check(n, item)
	if err != nil {
		return false, wrapIfNotEndOfRuneIterator(err, "lhs check")
	}
	if isLHSPassed {
		return true, nil
	}

	isRHSPassed, err := o.rhs.Check(n, item)
	if err != nil {
		return false, wrapIfNotEndOfRuneIterator(err, "rhs check")
	}
	return isRHSPassed, nil
}

func EnumAnyRune(checkers ...RuneEnumChecker) RuneEnumChecker {
	var any RuneEnumChecker = AlwaysRuneEnumCheckFalse
	for i := len(checkers) - 1; i >= 0; i-- {
		if checkers[i] == nil {
			continue
		}
		any = enumOrRune{checkers[i], any}
	}
	return any
}

type EnumFilteringRuneIterator struct {
	preparedRuneItem
	filter RuneEnumChecker
	count  int
}

func (it *EnumFilteringRuneIterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	for it.preparedRuneItem.HasNext() {
		next := it.base.Next()
		isFilterPassed, err := it.filter.Check(it.count, next)
		if err != nil {
			if !isEndOfRuneIterator(err) {
				err = errors.Wrap(err, "enum filtering iterator: check")
			}
			it.err = err
			return false
		}
		it.count++

		if !isFilterPassed {
			continue
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// RuneEnumFiltering sets filter while iterating over items and their serial numbers.
// If filters is empty, so all items will return.
func RuneEnumFiltering(items RuneIterator, filters ...RuneEnumChecker) RuneIterator {
	if items == nil {
		return EmptyRuneIterator
	}
	return &EnumFilteringRuneIterator{preparedRuneItem{base: items}, EnumAllRune(filters...), 0}
}

type DoingUntilRuneIterator struct {
	preparedRuneItem
	until RuneChecker
}

func (it *DoingUntilRuneIterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	for it.preparedRuneItem.HasNext() {
		next := it.base.Next()
		isUntilPassed, err := it.until.Check(next)
		if err != nil {
			if !isEndOfRuneIterator(err) {
				err = errors.Wrap(err, "doing until iterator: until")
			}
			it.err = err
			return false
		}

		if isUntilPassed {
			it.err = EndOfRuneIterator
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// RuneDoingUntil sets until checker while iterating over items.
// If untilList is empty, so all items returned as is.
func RuneDoingUntil(items RuneIterator, untilList ...RuneChecker) RuneIterator {
	if items == nil {
		return EmptyRuneIterator
	}
	return &DoingUntilRuneIterator{preparedRuneItem{base: items}, AllRune(untilList...)}
}

func RuneDoUntil(items RuneIterator, untilList ...RuneChecker) error {
	// no error wrapping since no additional context for the error; just return it.
	return RuneDiscard(RuneDoingUntil(items, untilList...))
}

// RuneGettingBatch returns the next batch from items.
func RuneGettingBatch(items RuneIterator, batchSize int) RuneIterator {
	if items == nil {
		return EmptyRuneIterator
	}
	if batchSize == 0 {
		return items
	}

	size := 0
	return RuneDoingUntil(items, RuneCheck(func(item rune) (bool, error) {
		size++
		return size >= batchSize, nil
	}))
}
