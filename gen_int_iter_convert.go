// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
package iter

import "github.com/pkg/errors"

// IntConverter is an object converting an item type of int.
type IntConverter interface {
	// Convert should convert an item type of int into another item of int.
	// It is suggested to return EndOfIntIterator to stop iteration.
	Convert(int) (int, error)
}

// IntConvert is a shortcut implementation
// of IntConverter based on a function.
type IntConvert func(int) (int, error)

// Convert converts an item type of int into another item of int.
// It is suggested to return EndOfIntIterator to stop iteration.
func (c IntConvert) Convert(item int) (int, error) { return c(item) }

// NoIntConvert does nothing with item, just returns it as is.
var NoIntConvert IntConverter = IntConvert(
	func(item int) (int, error) { return item, nil })

type doubleIntConverter struct {
	lhs, rhs IntConverter
}

func (c doubleIntConverter) Convert(item int) (int, error) {
	item, err := c.lhs.Convert(item)
	if err != nil {
		return 0, errors.Wrap(err, "convert lhs")
	}
	item, err = c.rhs.Convert(item)
	if err != nil {
		return 0, errors.Wrap(err, "convert rhs")
	}
	return item, nil
}

// IntConverterSeries combines all the given converters to sequenced one
// It returns no converter if the list of converters is empty.
func IntConverterSeries(converters ...IntConverter) IntConverter {
	var series IntConverter = NoIntConvert
	for i := len(converters) - 1; i >= 0; i-- {
		if converters[i] == nil {
			continue
		}
		series = doubleIntConverter{lhs: converters[i], rhs: series}
	}

	return series
}

// ConvertingIntIterator does iteration with
// converting by previously set converter.
type ConvertingIntIterator struct {
	preparedIntItem
	converter IntConverter
}

// HasNext checks if there is the next item
// in the iterator. HasNext is idempotent.
func (it *ConvertingIntIterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	if it.preparedIntItem.HasNext() {
		next := it.base.Next()
		next, err := it.converter.Convert(next)
		if err != nil {
			if !isEndOfIntIterator(err) {
				err = errors.Wrap(err, "filtering iterator: check")
			}
			it.err = err
			return false
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// IntConverting sets converter while iterating over items.
// If converters is empty, so all items will not be affected.
func IntConverting(items IntIterator, converters ...IntConverter) IntIterator {
	if items == nil {
		return EmptyIntIterator
	}
	return &ConvertingIntIterator{
		preparedIntItem{base: items}, IntConverterSeries(converters...)}
}
