// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
package iter

type Uint32SliceIterator struct {
	slice []uint32
	cur   int
}

// NewShowtimeUint32SliceIterator returns a new instance of Uint32SliceIterator.
// Note: any changes in slice will affect correspond items in the iterator.
// Use Uint32Unroll(slice).MakeIter() instead of to iterate over copies of item in the items.
func NewShowtimeUint32SliceIterator(slice []uint32) *Uint32SliceIterator {
	it := &Uint32SliceIterator{slice: slice}
	return it
}

func (it Uint32SliceIterator) HasNext() bool {
	return it.cur < len(it.slice)
}

func (it *Uint32SliceIterator) Next() uint32 {
	if it.cur >= len(it.slice) {
		panic("iterator next: pointer out of range")
	}

	item := it.slice[it.cur]
	it.cur++
	return item
}

func (Uint32SliceIterator) Err() error { return nil }

type InvertingUint32SliceIterator struct {
	slice []uint32
	cur   int
}

// NewInvertingShowtimeUint32SliceIterator returns a new instance of InvertingUint32SliceIterator.
// Note: any changes in slice will affect correspond items in the iterator.
// Use InvertingUint32Slice(Uint32Unroll(slice)).MakeIter() instead of to iterate over copies of item in the items.
func NewInvertingShowtimeUint32SliceIterator(slice []uint32) *InvertingUint32SliceIterator {
	it := &InvertingUint32SliceIterator{slice: slice, cur: len(slice) - 1}
	return it
}

func (it InvertingUint32SliceIterator) HasNext() bool {
	return it.cur >= 0
}

func (it *InvertingUint32SliceIterator) Next() uint32 {
	if it.cur < 0 {
		panic("iterator next: pointer out of range")
	}

	item := it.slice[it.cur]
	it.cur--
	return item
}

func (InvertingUint32SliceIterator) Err() error { return nil }

func Uint32Unroll(items Uint32Iterator) Uint32Slice {
	var slice Uint32Slice
	panicIfUint32IteratorError(Uint32Range(items, Uint32Handle(func(item uint32) error {
		slice = append(slice, item)
		return nil
	})), "unroll: discard")

	return slice
}

type Uint32Slice []uint32

func (s Uint32Slice) MakeIter() (Uint32Iterator, error) {
	return NewShowtimeUint32SliceIterator(s), nil
}

func MakeUint32SliceIter(slice []uint32) Uint32Iterator {
	items, err := Uint32Slice(slice).MakeIter()
	panicIfUint32IteratorError(err, "make slice iter")
	return items
}

type InvertingUint32Slice []uint32

func (s InvertingUint32Slice) MakeIter() (Uint32Iterator, error) {
	return NewInvertingShowtimeUint32SliceIterator(s), nil
}

func MakeInvertingUint32SliceIter(slice []uint32) Uint32Iterator {
	items, err := InvertingUint32Slice(slice).MakeIter()
	panicIfUint32IteratorError(err, "make inverting slice iter")
	return items
}

func Uint32Invert(items Uint32Iterator) Uint32Iterator {
	return MakeInvertingUint32SliceIter(Uint32Unroll(items))
}
