package with_adding

import (
	"io/ioutil"

	"github.com/pkg/errors"

	"github.com/soven/go-iterate/internal/app"
)

type AssembleTemplatePrefixAdder struct {
	decorated app.TemplateAssembler

	prefix string
}

func newAssembleTemplateAdder(decorated app.TemplateAssembler, prefix string) AssembleTemplatePrefixAdder {
	if decorated == nil {
		decorated = app.NoAssembleTemplate
	}
	return AssembleTemplatePrefixAdder{decorated: decorated, prefix: prefix}
}

// AssembleTemplate assembles template from code using replace context.
func (a AssembleTemplatePrefixAdder) AssembleTemplate(templateDir string, ctx app.ToMacroReplaceContext,
) (targetFilePaths []string, err error) {
	targetFilePaths, err = a.decorated.AssembleTemplate(templateDir, ctx)
	if err != nil {
		// no wrapping since no additional context
		return nil, err
	}

	for _, filePath := range targetFilePaths {
		err := a.addPrefixToFile(filePath)
		if err != nil {
			return nil, errors.Wrapf(err, "add prefix `%s` to file `%s`", a.prefix, filePath)
		}
	}

	return targetFilePaths, nil
}

func (a AssembleTemplatePrefixAdder) addPrefixToFile(filePath string) error {
	if len(a.prefix) == 0 {
		return nil
	}

	fileBytes, err := ioutil.ReadFile(filePath)
	if err != nil {
		return errors.Wrap(err, "read file")
	}

	result := append([]byte(a.prefix), fileBytes...)

	err = ioutil.WriteFile(filePath, result, 0664)
	if err != nil {
		return errors.Wrap(err, "write file")
	}

	return nil
}

// WithNoEditPrefixAdding decorates app.TemplateAssembler with adding prefix logic.
func WithNoEditPrefixAdding(decorated app.TemplateAssembler) AssembleTemplatePrefixAdder {
	const noEditPrefix = "// Code generated by github.com/soven/go-iterate. DO NOT EDIT.\n"
	return newAssembleTemplateAdder(decorated, noEditPrefix)
}
