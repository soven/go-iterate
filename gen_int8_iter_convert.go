package iter

// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
import "github.com/pkg/errors"

type Int8Converter interface {
	// It is suggested to return EndOfInt8Iterator to stop iteration.
	Convert(int8) (int8, error)
}

type Int8Convert func(int8) (int8, error)

func (c Int8Convert) Convert(item int8) (int8, error) { return c(item) }

var NoInt8Convert = Int8Convert(func(item int8) (int8, error) { return item, nil })

type doubleInt8Converter struct {
	lhs, rhs Int8Converter
}

func (c doubleInt8Converter) Convert(item int8) (int8, error) {
	item, err := c.lhs.Convert(item)
	if err != nil {
		return 0, errors.Wrap(err, "convert lhs")
	}
	item, err = c.rhs.Convert(item)
	if err != nil {
		return 0, errors.Wrap(err, "convert rhs")
	}
	return item, nil
}

func Int8ConverterSeries(converters ...Int8Converter) Int8Converter {
	var series Int8Converter = NoInt8Convert
	for i := len(converters) - 1; i >= 0; i-- {
		if converters[i] == nil {
			continue
		}
		series = doubleInt8Converter{lhs: converters[i], rhs: series}
	}

	return series
}

type ConvertingInt8Iterator struct {
	preparedInt8Item
	converter Int8Converter
}

func (it *ConvertingInt8Iterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	if it.preparedInt8Item.HasNext() {
		next := it.base.Next()
		next, err := it.converter.Convert(next)
		if err != nil {
			if !isEndOfInt8Iterator(err) {
				err = errors.Wrap(err, "filtering iterator: check")
			}
			it.err = err
			return false
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// Int8Converting sets converter while iterating over items.
// If converters is empty, so all items will not be affected.
func Int8Converting(items Int8Iterator, converters ...Int8Converter) Int8Iterator {
	if items == nil {
		return EmptyInt8Iterator
	}
	return &ConvertingInt8Iterator{preparedInt8Item{base: items}, Int8ConverterSeries(converters...)}
}

func Int8Map(items Int8Iterator, converter ...Int8Converter) error {
	// no error wrapping since no additional context for the error; just return it.
	return Int8Discard(Int8Converting(items, converter...))
}
