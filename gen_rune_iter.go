// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
package iter

type RuneIterator interface {
	// HasNext checks if there is the next item
	// in the iterator. HasNext should be idempotent.
	HasNext() bool
	// Next should be invoked after check HasNext.
	Next() rune
	// Err contains first met error while Next.
	Err() error
}

type emptyRuneIterator struct{}

func (emptyRuneIterator) HasNext() bool     { return false }
func (emptyRuneIterator) Next() (next rune) { return 0 }
func (emptyRuneIterator) Err() error        { return nil }

var EmptyRuneIterator = emptyRuneIterator{}

type RuneIterMaker interface {
	MakeIter() (RuneIterator, error)
}

type MakeRuneIter func() (RuneIterator, error)

func (m MakeRuneIter) MakeIter() (RuneIterator, error) { return m() }

var MakeNoRuneIter = MakeRuneIter(func() (RuneIterator, error) { return EmptyRuneIterator, nil })

// RuneDiscard just range over all items and do nothing with each of them.
func RuneDiscard(items RuneIterator) error {
	if items == nil {
		return nil
	}
	for items.HasNext() {
		_ = items.Next()
	}
	// no error wrapping since no additional context for the error; just return it.
	return items.Err()
}
