// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
package iter

type Int64SliceIterator struct {
	slice []int64
	cur   int
}

// NewShowtimeInt64SliceIterator returns a new instance of Int64SliceIterator.
// Note: any changes in slice will affect correspond items in the iterator.
// Use Int64Unroll(slice).MakeIter() instead of to iterate over copies of item in the items.
func NewShowtimeInt64SliceIterator(slice []int64) *Int64SliceIterator {
	it := &Int64SliceIterator{slice: slice}
	return it
}

func (it Int64SliceIterator) HasNext() bool {
	return it.cur < len(it.slice)
}

func (it *Int64SliceIterator) Next() int64 {
	if it.cur >= len(it.slice) {
		panic("iterator next: pointer out of range")
	}

	item := it.slice[it.cur]
	it.cur++
	return item
}

func (Int64SliceIterator) Err() error { return nil }

type InvertingInt64SliceIterator struct {
	slice []int64
	cur   int
}

// NewInvertingShowtimeInt64SliceIterator returns a new instance of InvertingInt64SliceIterator.
// Note: any changes in slice will affect correspond items in the iterator.
// Use InvertingInt64Slice(Int64Unroll(slice)).MakeIter() instead of to iterate over copies of item in the items.
func NewInvertingShowtimeInt64SliceIterator(slice []int64) *InvertingInt64SliceIterator {
	it := &InvertingInt64SliceIterator{slice: slice, cur: len(slice) - 1}
	return it
}

func (it InvertingInt64SliceIterator) HasNext() bool {
	return it.cur >= 0
}

func (it *InvertingInt64SliceIterator) Next() int64 {
	if it.cur < 0 {
		panic("iterator next: pointer out of range")
	}

	item := it.slice[it.cur]
	it.cur--
	return item
}

func (InvertingInt64SliceIterator) Err() error { return nil }

func Int64Unroll(items Int64Iterator) Int64Slice {
	var slice Int64Slice
	panicIfInt64IteratorError(Int64Range(items, Int64Handle(func(item int64) error {
		slice = append(slice, item)
		return nil
	})), "unroll: discard")

	return slice
}

type Int64Slice []int64

func (s Int64Slice) MakeIter() (Int64Iterator, error) {
	return NewShowtimeInt64SliceIterator(s), nil
}

func MakeInt64SliceIter(slice []int64) Int64Iterator {
	items, err := Int64Slice(slice).MakeIter()
	panicIfInt64IteratorError(err, "make slice iter")
	return items
}

type InvertingInt64Slice []int64

func (s InvertingInt64Slice) MakeIter() (Int64Iterator, error) {
	return NewInvertingShowtimeInt64SliceIterator(s), nil
}

func MakeInvertingInt64SliceIter(slice []int64) Int64Iterator {
	items, err := InvertingInt64Slice(slice).MakeIter()
	panicIfInt64IteratorError(err, "make inverting slice iter")
	return items
}

func Int64Invert(items Int64Iterator) Int64Iterator {
	return MakeInvertingInt64SliceIter(Int64Unroll(items))
}
