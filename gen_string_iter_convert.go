package iter

// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
import "github.com/pkg/errors"

type StringConverter interface {
	// It is suggested to return EndOfStringIterator to stop iteration.
	Convert(string) (string, error)
}

type StringConvert func(string) (string, error)

func (c StringConvert) Convert(item string) (string, error) { return c(item) }

var NoStringConvert = StringConvert(func(item string) (string, error) { return item, nil })

type doubleStringConverter struct {
	lhs, rhs StringConverter
}

func (c doubleStringConverter) Convert(item string) (string, error) {
	item, err := c.lhs.Convert(item)
	if err != nil {
		return "", errors.Wrap(err, "convert lhs")
	}
	item, err = c.rhs.Convert(item)
	if err != nil {
		return "", errors.Wrap(err, "convert rhs")
	}
	return item, nil
}

func StringConverterSeries(converters ...StringConverter) StringConverter {
	var series StringConverter = NoStringConvert
	for i := len(converters) - 1; i >= 0; i-- {
		if converters[i] == nil {
			continue
		}
		series = doubleStringConverter{lhs: converters[i], rhs: series}
	}

	return series
}

type ConvertingStringIterator struct {
	preparedStringItem
	converter StringConverter
}

func (it *ConvertingStringIterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	if it.preparedStringItem.HasNext() {
		next := it.base.Next()
		next, err := it.converter.Convert(next)
		if err != nil {
			if !isEndOfStringIterator(err) {
				err = errors.Wrap(err, "filtering iterator: check")
			}
			it.err = err
			return false
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// StringConverting sets converter while iterating over items.
// If converters is empty, so all items will not be affected.
func StringConverting(items StringIterator, converters ...StringConverter) StringIterator {
	if items == nil {
		return EmptyStringIterator
	}
	return &ConvertingStringIterator{preparedStringItem{base: items}, StringConverterSeries(converters...)}
}

func StringMap(items StringIterator, converter ...StringConverter) error {
	// no error wrapping since no additional context for the error; just return it.
	return StringDiscard(StringConverting(items, converter...))
}
