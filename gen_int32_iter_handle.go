// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
package iter

import "github.com/pkg/errors"

type Int32Handler interface {
	// It is suggested to return EndOfInt32Iterator to stop iteration.
	Handle(int32) error
}

type Int32Handle func(int32) error

func (h Int32Handle) Handle(item int32) error { return h(item) }

var Int32DoNothing = Int32Handle(func(_ int32) error { return nil })

type doubleInt32Handler struct {
	lhs, rhs Int32Handler
}

func (h doubleInt32Handler) Handle(item int32) error {
	err := h.lhs.Handle(item)
	if err != nil {
		return errors.Wrap(err, "handle lhs")
	}
	err = h.rhs.Handle(item)
	if err != nil {
		return errors.Wrap(err, "handle rhs")
	}
	return nil
}

func Int32HandlerSeries(handlers ...Int32Handler) Int32Handler {
	var series Int32Handler = Int32DoNothing
	for i := len(handlers) - 1; i >= 0; i-- {
		if handlers[i] == nil {
			continue
		}
		series = doubleInt32Handler{lhs: handlers[i], rhs: series}
	}
	return series
}

type HandlingInt32Iterator struct {
	preparedInt32Item
	handler Int32Handler
}

func (it *HandlingInt32Iterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	if it.preparedInt32Item.HasNext() {
		next := it.base.Next()
		err := it.handler.Handle(next)
		if err != nil {
			if !isEndOfInt32Iterator(err) {
				err = errors.Wrap(err, "handling iterator: check")
			}
			it.err = err
			return false
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// Int32Handling sets handler while iterating over items.
// If handlers is empty, so it will do nothing.
func Int32Handling(items Int32Iterator, handlers ...Int32Handler) Int32Iterator {
	if items == nil {
		return EmptyInt32Iterator
	}
	return &HandlingInt32Iterator{preparedInt32Item{base: items}, Int32HandlerSeries(handlers...)}
}

func Int32Range(items Int32Iterator, handler ...Int32Handler) error {
	// no error wrapping since no additional context for the error; just return it.
	return Int32Discard(Int32Handling(items, handler...))
}

type Int32EnumHandler interface {
	// It is suggested to return EndOfInt32Iterator to stop iteration.
	Handle(int, int32) error
}

type Int32EnumHandle func(int, int32) error

func (h Int32EnumHandle) Handle(n int, item int32) error { return h(n, item) }

var Int32DoEnumNothing = Int32EnumHandle(func(_ int, _ int32) error { return nil })

type doubleInt32EnumHandler struct {
	lhs, rhs Int32EnumHandler
}

func (h doubleInt32EnumHandler) Handle(n int, item int32) error {
	err := h.lhs.Handle(n, item)
	if err != nil {
		return errors.Wrap(err, "handle lhs")
	}
	err = h.rhs.Handle(n, item)
	if err != nil {
		return errors.Wrap(err, "handle rhs")
	}
	return nil
}

func Int32EnumHandlerSeries(handlers ...Int32EnumHandler) Int32EnumHandler {
	var series Int32EnumHandler = Int32DoEnumNothing
	for i := len(handlers) - 1; i >= 0; i-- {
		if handlers[i] == nil {
			continue
		}
		series = doubleInt32EnumHandler{lhs: handlers[i], rhs: series}
	}
	return series
}

type EnumHandlingInt32Iterator struct {
	preparedInt32Item
	handler Int32EnumHandler
	count   int
}

func (it *EnumHandlingInt32Iterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	if it.preparedInt32Item.HasNext() {
		next := it.base.Next()
		err := it.handler.Handle(it.count, next)
		if err != nil {
			if !isEndOfInt32Iterator(err) {
				err = errors.Wrap(err, "enum handling iterator: check")
			}
			it.err = err
			return false
		}
		it.count++

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// Int32EnumHandling sets handler while iterating over items with their serial number.
// If handlers is empty, so it will do nothing.
func Int32EnumHandling(items Int32Iterator, handlers ...Int32EnumHandler) Int32Iterator {
	if items == nil {
		return EmptyInt32Iterator
	}
	return &EnumHandlingInt32Iterator{
		preparedInt32Item{base: items}, Int32EnumHandlerSeries(handlers...), 0}
}

func Int32Enumerate(items Int32Iterator, handler ...Int32EnumHandler) error {
	// no error wrapping since no additional context for the error; just return it.
	return Int32Discard(Int32EnumHandling(items, handler...))
}
