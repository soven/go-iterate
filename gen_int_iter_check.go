// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
package iter

import "github.com/pkg/errors"

type IntChecker interface {
	// It is suggested to return EndOfIntIterator to stop iteration.
	Check(int) (bool, error)
}

type IntCheck func(int) (bool, error)

func (ch IntCheck) Check(item int) (bool, error) { return ch(item) }

var (
	AlwaysIntCheckTrue  = IntCheck(func(item int) (bool, error) { return true, nil })
	AlwaysIntCheckFalse = IntCheck(func(item int) (bool, error) { return false, nil })
)

func NotInt(checker IntChecker) IntChecker {
	if checker == nil {
		return AlwaysIntCheckTrue
	}
	return IntCheck(func(item int) (bool, error) {
		yes, err := checker.Check(item)
		if err != nil {
			// No error wrapping since an error context is missing.
			return false, err
		}

		return !yes, nil
	})
}

type andInt struct {
	lhs, rhs IntChecker
}

func (a andInt) Check(item int) (bool, error) {
	isLHSPassed, err := a.lhs.Check(item)
	if err != nil {
		return false, wrapIfNotEndOfIntIterator(err, "lhs check")
	}
	if !isLHSPassed {
		return false, nil
	}

	isRHSPassed, err := a.rhs.Check(item)
	if err != nil {
		return false, wrapIfNotEndOfIntIterator(err, "rhs check")
	}
	return isRHSPassed, nil
}

func AllInt(checkers ...IntChecker) IntChecker {
	var all IntChecker = AlwaysIntCheckTrue
	for i := len(checkers) - 1; i >= 0; i-- {
		if checkers[i] == nil {
			continue
		}
		all = andInt{checkers[i], all}
	}
	return all
}

type orInt struct {
	lhs, rhs IntChecker
}

func (o orInt) Check(item int) (bool, error) {
	isLHSPassed, err := o.lhs.Check(item)
	if err != nil {
		return false, wrapIfNotEndOfIntIterator(err, "lhs check")
	}
	if isLHSPassed {
		return true, nil
	}

	isRHSPassed, err := o.rhs.Check(item)
	if err != nil {
		return false, wrapIfNotEndOfIntIterator(err, "rhs check")
	}
	return isRHSPassed, nil
}

func AnyInt(checkers ...IntChecker) IntChecker {
	var any IntChecker = AlwaysIntCheckFalse
	for i := len(checkers) - 1; i >= 0; i-- {
		if checkers[i] == nil {
			continue
		}
		any = orInt{checkers[i], any}
	}
	return any
}

type FilteringIntIterator struct {
	preparedIntItem
	filter IntChecker
}

func (it *FilteringIntIterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	for it.preparedIntItem.HasNext() {
		next := it.base.Next()
		isFilterPassed, err := it.filter.Check(next)
		if err != nil {
			if !isEndOfIntIterator(err) {
				err = errors.Wrap(err, "filtering iterator: check")
			}
			it.err = err
			return false
		}

		if !isFilterPassed {
			continue
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// IntFiltering sets filter while iterating over items.
// If filters is empty, so all items will return.
func IntFiltering(items IntIterator, filters ...IntChecker) IntIterator {
	if items == nil {
		return EmptyIntIterator
	}
	return &FilteringIntIterator{preparedIntItem{base: items}, AllInt(filters...)}
}

func IntFilter(items IntIterator, checker ...IntChecker) error {
	// no error wrapping since no additional context for the error; just return it.
	return IntDiscard(IntFiltering(items, checker...))
}

type IntEnumChecker interface {
	// It is suggested to return EndOfIntIterator to stop iteration.
	Check(int, int) (bool, error)
}

type IntEnumCheck func(int, int) (bool, error)

func (ch IntEnumCheck) Check(n int, item int) (bool, error) { return ch(n, item) }

type enumFromIntChecker struct {
	IntChecker
}

func (ch enumFromIntChecker) Check(_ int, item int) (bool, error) { return ch.IntChecker.Check(item) }

func EnumFromIntChecker(checker IntChecker) IntEnumChecker {
	return &enumFromIntChecker{checker}
}

var (
	AlwaysIntEnumCheckTrue  = EnumFromIntChecker(AlwaysIntCheckTrue)
	AlwaysIntEnumCheckFalse = EnumFromIntChecker(AlwaysIntCheckFalse)
)

func EnumNotInt(checker IntEnumChecker) IntEnumChecker {
	if checker == nil {
		return AlwaysIntEnumCheckTrue
	}
	return IntEnumCheck(func(n int, item int) (bool, error) {
		yes, err := checker.Check(n, item)
		if err != nil {
			// No error wrapping since an error context is missing.
			return false, err
		}

		return !yes, nil
	})
}

type enumAndInt struct {
	lhs, rhs IntEnumChecker
}

func (a enumAndInt) Check(n int, item int) (bool, error) {
	isLHSPassed, err := a.lhs.Check(n, item)
	if err != nil {
		return false, wrapIfNotEndOfIntIterator(err, "lhs check")
	}
	if !isLHSPassed {
		return false, nil
	}

	isRHSPassed, err := a.rhs.Check(n, item)
	if err != nil {
		return false, wrapIfNotEndOfIntIterator(err, "rhs check")
	}
	return isRHSPassed, nil
}

func EnumAllInt(checkers ...IntEnumChecker) IntEnumChecker {
	var all IntEnumChecker = AlwaysIntEnumCheckTrue
	for i := len(checkers) - 1; i >= 0; i-- {
		if checkers[i] == nil {
			continue
		}
		all = enumAndInt{checkers[i], all}
	}
	return all
}

type enumOrInt struct {
	lhs, rhs IntEnumChecker
}

func (o enumOrInt) Check(n int, item int) (bool, error) {
	isLHSPassed, err := o.lhs.Check(n, item)
	if err != nil {
		return false, wrapIfNotEndOfIntIterator(err, "lhs check")
	}
	if isLHSPassed {
		return true, nil
	}

	isRHSPassed, err := o.rhs.Check(n, item)
	if err != nil {
		return false, wrapIfNotEndOfIntIterator(err, "rhs check")
	}
	return isRHSPassed, nil
}

func EnumAnyInt(checkers ...IntEnumChecker) IntEnumChecker {
	var any IntEnumChecker = AlwaysIntEnumCheckFalse
	for i := len(checkers) - 1; i >= 0; i-- {
		if checkers[i] == nil {
			continue
		}
		any = enumOrInt{checkers[i], any}
	}
	return any
}

type EnumFilteringIntIterator struct {
	preparedIntItem
	filter IntEnumChecker
	count  int
}

func (it *EnumFilteringIntIterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	for it.preparedIntItem.HasNext() {
		next := it.base.Next()
		isFilterPassed, err := it.filter.Check(it.count, next)
		if err != nil {
			if !isEndOfIntIterator(err) {
				err = errors.Wrap(err, "enum filtering iterator: check")
			}
			it.err = err
			return false
		}
		it.count++

		if !isFilterPassed {
			continue
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// IntEnumFiltering sets filter while iterating over items and their serial numbers.
// If filters is empty, so all items will return.
func IntEnumFiltering(items IntIterator, filters ...IntEnumChecker) IntIterator {
	if items == nil {
		return EmptyIntIterator
	}
	return &EnumFilteringIntIterator{preparedIntItem{base: items}, EnumAllInt(filters...), 0}
}

type DoingUntilIntIterator struct {
	preparedIntItem
	until IntChecker
}

func (it *DoingUntilIntIterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	for it.preparedIntItem.HasNext() {
		next := it.base.Next()
		isUntilPassed, err := it.until.Check(next)
		if err != nil {
			if !isEndOfIntIterator(err) {
				err = errors.Wrap(err, "doing until iterator: until")
			}
			it.err = err
			return false
		}

		if isUntilPassed {
			it.err = EndOfIntIterator
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// IntDoingUntil sets until checker while iterating over items.
// If untilList is empty, so all items returned as is.
func IntDoingUntil(items IntIterator, untilList ...IntChecker) IntIterator {
	if items == nil {
		return EmptyIntIterator
	}
	return &DoingUntilIntIterator{preparedIntItem{base: items}, AllInt(untilList...)}
}

func IntDoUntil(items IntIterator, untilList ...IntChecker) error {
	// no error wrapping since no additional context for the error; just return it.
	return IntDiscard(IntDoingUntil(items, untilList...))
}

// IntGettingBatch returns the next batch from items.
func IntGettingBatch(items IntIterator, batchSize int) IntIterator {
	if items == nil {
		return EmptyIntIterator
	}
	if batchSize == 0 {
		return items
	}

	size := 0
	return IntDoingUntil(items, IntCheck(func(item int) (bool, error) {
		size++
		return size >= batchSize, nil
	}))
}
