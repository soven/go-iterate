// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
package iter

type Int8SliceIterator struct {
	slice []int8
	cur   int
}

// NewShowtimeInt8SliceIterator returns a new instance of Int8SliceIterator.
// Note: any changes in slice will affect correspond items in the iterator.
// Use Int8Unroll(slice).MakeIter() instead of to iterate over copies of item in the items.
func NewShowtimeInt8SliceIterator(slice []int8) *Int8SliceIterator {
	it := &Int8SliceIterator{slice: slice}
	return it
}

func (it Int8SliceIterator) HasNext() bool {
	return it.cur < len(it.slice)
}

func (it *Int8SliceIterator) Next() int8 {
	if it.cur >= len(it.slice) {
		panic("iterator next: pointer out of range")
	}

	item := it.slice[it.cur]
	it.cur++
	return item
}

func (Int8SliceIterator) Err() error { return nil }

type InvertingInt8SliceIterator struct {
	slice []int8
	cur   int
}

// NewInvertingShowtimeInt8SliceIterator returns a new instance of InvertingInt8SliceIterator.
// Note: any changes in slice will affect correspond items in the iterator.
// Use InvertingInt8Slice(Int8Unroll(slice)).MakeIter() instead of to iterate over copies of item in the items.
func NewInvertingShowtimeInt8SliceIterator(slice []int8) *InvertingInt8SliceIterator {
	it := &InvertingInt8SliceIterator{slice: slice, cur: len(slice) - 1}
	return it
}

func (it InvertingInt8SliceIterator) HasNext() bool {
	return it.cur >= 0
}

func (it *InvertingInt8SliceIterator) Next() int8 {
	if it.cur < 0 {
		panic("iterator next: pointer out of range")
	}

	item := it.slice[it.cur]
	it.cur--
	return item
}

func (InvertingInt8SliceIterator) Err() error { return nil }

func Int8Unroll(items Int8Iterator) Int8Slice {
	var slice Int8Slice
	panicIfInt8IteratorError(Int8Range(items, Int8Handle(func(item int8) error {
		slice = append(slice, item)
		return nil
	})), "unroll: discard")

	return slice
}

type Int8Slice []int8

func (s Int8Slice) MakeIter() (Int8Iterator, error) {
	return NewShowtimeInt8SliceIterator(s), nil
}

func MakeInt8SliceIter(slice []int8) Int8Iterator {
	items, err := Int8Slice(slice).MakeIter()
	panicIfInt8IteratorError(err, "make slice iter")
	return items
}

type InvertingInt8Slice []int8

func (s InvertingInt8Slice) MakeIter() (Int8Iterator, error) {
	return NewInvertingShowtimeInt8SliceIterator(s), nil
}

func MakeInvertingInt8SliceIter(slice []int8) Int8Iterator {
	items, err := InvertingInt8Slice(slice).MakeIter()
	panicIfInt8IteratorError(err, "make inverting slice iter")
	return items
}

func Int8Invert(items Int8Iterator) Int8Iterator {
	return MakeInvertingInt8SliceIter(Int8Unroll(items))
}
