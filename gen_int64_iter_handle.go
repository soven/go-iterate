// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
package iter

import "github.com/pkg/errors"

type Int64Handler interface {
	// It is suggested to return EndOfInt64Iterator to stop iteration.
	Handle(int64) error
}

type Int64Handle func(int64) error

func (h Int64Handle) Handle(item int64) error { return h(item) }

var Int64DoNothing = Int64Handle(func(_ int64) error { return nil })

type doubleInt64Handler struct {
	lhs, rhs Int64Handler
}

func (h doubleInt64Handler) Handle(item int64) error {
	err := h.lhs.Handle(item)
	if err != nil {
		return errors.Wrap(err, "handle lhs")
	}
	err = h.rhs.Handle(item)
	if err != nil {
		return errors.Wrap(err, "handle rhs")
	}
	return nil
}

func Int64HandlerSeries(handlers ...Int64Handler) Int64Handler {
	var series Int64Handler = Int64DoNothing
	for i := len(handlers) - 1; i >= 0; i-- {
		if handlers[i] == nil {
			continue
		}
		series = doubleInt64Handler{lhs: handlers[i], rhs: series}
	}
	return series
}

type HandlingInt64Iterator struct {
	preparedInt64Item
	handler Int64Handler
}

func (it *HandlingInt64Iterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	if it.preparedInt64Item.HasNext() {
		next := it.base.Next()
		err := it.handler.Handle(next)
		if err != nil {
			if !isEndOfInt64Iterator(err) {
				err = errors.Wrap(err, "handling iterator: check")
			}
			it.err = err
			return false
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// Int64Handling sets handler while iterating over items.
// If handlers is empty, so it will do nothing.
func Int64Handling(items Int64Iterator, handlers ...Int64Handler) Int64Iterator {
	if items == nil {
		return EmptyInt64Iterator
	}
	return &HandlingInt64Iterator{preparedInt64Item{base: items}, Int64HandlerSeries(handlers...)}
}

func Int64Range(items Int64Iterator, handler ...Int64Handler) error {
	// no error wrapping since no additional context for the error; just return it.
	return Int64Discard(Int64Handling(items, handler...))
}

type Int64EnumHandler interface {
	// It is suggested to return EndOfInt64Iterator to stop iteration.
	Handle(int, int64) error
}

type Int64EnumHandle func(int, int64) error

func (h Int64EnumHandle) Handle(n int, item int64) error { return h(n, item) }

var Int64DoEnumNothing = Int64EnumHandle(func(_ int, _ int64) error { return nil })

type doubleInt64EnumHandler struct {
	lhs, rhs Int64EnumHandler
}

func (h doubleInt64EnumHandler) Handle(n int, item int64) error {
	err := h.lhs.Handle(n, item)
	if err != nil {
		return errors.Wrap(err, "handle lhs")
	}
	err = h.rhs.Handle(n, item)
	if err != nil {
		return errors.Wrap(err, "handle rhs")
	}
	return nil
}

func Int64EnumHandlerSeries(handlers ...Int64EnumHandler) Int64EnumHandler {
	var series Int64EnumHandler = Int64DoEnumNothing
	for i := len(handlers) - 1; i >= 0; i-- {
		if handlers[i] == nil {
			continue
		}
		series = doubleInt64EnumHandler{lhs: handlers[i], rhs: series}
	}
	return series
}

type EnumHandlingInt64Iterator struct {
	preparedInt64Item
	handler Int64EnumHandler
	count   int
}

func (it *EnumHandlingInt64Iterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	if it.preparedInt64Item.HasNext() {
		next := it.base.Next()
		err := it.handler.Handle(it.count, next)
		if err != nil {
			if !isEndOfInt64Iterator(err) {
				err = errors.Wrap(err, "enum handling iterator: check")
			}
			it.err = err
			return false
		}
		it.count++

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// Int64EnumHandling sets handler while iterating over items with their serial number.
// If handlers is empty, so it will do nothing.
func Int64EnumHandling(items Int64Iterator, handlers ...Int64EnumHandler) Int64Iterator {
	if items == nil {
		return EmptyInt64Iterator
	}
	return &EnumHandlingInt64Iterator{
		preparedInt64Item{base: items}, Int64EnumHandlerSeries(handlers...), 0}
}

func Int64Enumerate(items Int64Iterator, handler ...Int64EnumHandler) error {
	// no error wrapping since no additional context for the error; just return it.
	return Int64Discard(Int64EnumHandling(items, handler...))
}
