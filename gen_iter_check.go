// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
package iter

import "github.com/pkg/errors"

type Checker interface {
	// It is suggested to return EndOfIterator to stop iteration.
	Check(interface{}) (bool, error)
}

type Check func(interface{}) (bool, error)

func (ch Check) Check(item interface{}) (bool, error) { return ch(item) }

var (
	AlwaysCheckTrue  = Check(func(item interface{}) (bool, error) { return true, nil })
	AlwaysCheckFalse = Check(func(item interface{}) (bool, error) { return false, nil })
)

func Not(checker Checker) Checker {
	if checker == nil {
		return AlwaysCheckTrue
	}
	return Check(func(item interface{}) (bool, error) {
		yes, err := checker.Check(item)
		if err != nil {
			// No error wrapping since an error context is missing.
			return false, err
		}

		return !yes, nil
	})
}

type and struct {
	lhs, rhs Checker
}

func (a and) Check(item interface{}) (bool, error) {
	isLHSPassed, err := a.lhs.Check(item)
	if err != nil {
		return false, wrapIfNotEndOfIterator(err, "lhs check")
	}
	if !isLHSPassed {
		return false, nil
	}

	isRHSPassed, err := a.rhs.Check(item)
	if err != nil {
		return false, wrapIfNotEndOfIterator(err, "rhs check")
	}
	return isRHSPassed, nil
}

func All(checkers ...Checker) Checker {
	var all Checker = AlwaysCheckTrue
	for i := len(checkers) - 1; i >= 0; i-- {
		if checkers[i] == nil {
			continue
		}
		all = and{checkers[i], all}
	}
	return all
}

type or struct {
	lhs, rhs Checker
}

func (o or) Check(item interface{}) (bool, error) {
	isLHSPassed, err := o.lhs.Check(item)
	if err != nil {
		return false, wrapIfNotEndOfIterator(err, "lhs check")
	}
	if isLHSPassed {
		return true, nil
	}

	isRHSPassed, err := o.rhs.Check(item)
	if err != nil {
		return false, wrapIfNotEndOfIterator(err, "rhs check")
	}
	return isRHSPassed, nil
}

func Any(checkers ...Checker) Checker {
	var any Checker = AlwaysCheckFalse
	for i := len(checkers) - 1; i >= 0; i-- {
		if checkers[i] == nil {
			continue
		}
		any = or{checkers[i], any}
	}
	return any
}

type FilteringIterator struct {
	preparedItem
	filter Checker
}

func (it *FilteringIterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	for it.preparedItem.HasNext() {
		next := it.base.Next()
		isFilterPassed, err := it.filter.Check(next)
		if err != nil {
			if !isEndOfIterator(err) {
				err = errors.Wrap(err, "filtering iterator: check")
			}
			it.err = err
			return false
		}

		if !isFilterPassed {
			continue
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// Filtering sets filter while iterating over items.
// If filters is empty, so all items will return.
func Filtering(items Iterator, filters ...Checker) Iterator {
	if items == nil {
		return EmptyIterator
	}
	return &FilteringIterator{preparedItem{base: items}, All(filters...)}
}

func Filter(items Iterator, checker ...Checker) error {
	// no error wrapping since no additional context for the error; just return it.
	return Discard(Filtering(items, checker...))
}

type EnumChecker interface {
	// It is suggested to return EndOfIterator to stop iteration.
	Check(int, interface{}) (bool, error)
}

type EnumCheck func(int, interface{}) (bool, error)

func (ch EnumCheck) Check(n int, item interface{}) (bool, error) { return ch(n, item) }

type enumFromChecker struct {
	Checker
}

func (ch enumFromChecker) Check(_ int, item interface{}) (bool, error) { return ch.Checker.Check(item) }

func EnumFromChecker(checker Checker) EnumChecker {
	return &enumFromChecker{checker}
}

var (
	AlwaysEnumCheckTrue  = EnumFromChecker(AlwaysCheckTrue)
	AlwaysEnumCheckFalse = EnumFromChecker(AlwaysCheckFalse)
)

func EnumNot(checker EnumChecker) EnumChecker {
	if checker == nil {
		return AlwaysEnumCheckTrue
	}
	return EnumCheck(func(n int, item interface{}) (bool, error) {
		yes, err := checker.Check(n, item)
		if err != nil {
			// No error wrapping since an error context is missing.
			return false, err
		}

		return !yes, nil
	})
}

type enumAnd struct {
	lhs, rhs EnumChecker
}

func (a enumAnd) Check(n int, item interface{}) (bool, error) {
	isLHSPassed, err := a.lhs.Check(n, item)
	if err != nil {
		return false, wrapIfNotEndOfIterator(err, "lhs check")
	}
	if !isLHSPassed {
		return false, nil
	}

	isRHSPassed, err := a.rhs.Check(n, item)
	if err != nil {
		return false, wrapIfNotEndOfIterator(err, "rhs check")
	}
	return isRHSPassed, nil
}

func EnumAll(checkers ...EnumChecker) EnumChecker {
	var all EnumChecker = AlwaysEnumCheckTrue
	for i := len(checkers) - 1; i >= 0; i-- {
		if checkers[i] == nil {
			continue
		}
		all = enumAnd{checkers[i], all}
	}
	return all
}

type enumOr struct {
	lhs, rhs EnumChecker
}

func (o enumOr) Check(n int, item interface{}) (bool, error) {
	isLHSPassed, err := o.lhs.Check(n, item)
	if err != nil {
		return false, wrapIfNotEndOfIterator(err, "lhs check")
	}
	if isLHSPassed {
		return true, nil
	}

	isRHSPassed, err := o.rhs.Check(n, item)
	if err != nil {
		return false, wrapIfNotEndOfIterator(err, "rhs check")
	}
	return isRHSPassed, nil
}

func EnumAny(checkers ...EnumChecker) EnumChecker {
	var any EnumChecker = AlwaysEnumCheckFalse
	for i := len(checkers) - 1; i >= 0; i-- {
		if checkers[i] == nil {
			continue
		}
		any = enumOr{checkers[i], any}
	}
	return any
}

type EnumFilteringIterator struct {
	preparedItem
	filter EnumChecker
	count  int
}

func (it *EnumFilteringIterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	for it.preparedItem.HasNext() {
		next := it.base.Next()
		isFilterPassed, err := it.filter.Check(it.count, next)
		if err != nil {
			if !isEndOfIterator(err) {
				err = errors.Wrap(err, "enum filtering iterator: check")
			}
			it.err = err
			return false
		}
		it.count++

		if !isFilterPassed {
			continue
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// EnumFiltering sets filter while iterating over items and their serial numbers.
// If filters is empty, so all items will return.
func EnumFiltering(items Iterator, filters ...EnumChecker) Iterator {
	if items == nil {
		return EmptyIterator
	}
	return &EnumFilteringIterator{preparedItem{base: items}, EnumAll(filters...), 0}
}

type DoingUntilIterator struct {
	preparedItem
	until Checker
}

func (it *DoingUntilIterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	for it.preparedItem.HasNext() {
		next := it.base.Next()
		isUntilPassed, err := it.until.Check(next)
		if err != nil {
			if !isEndOfIterator(err) {
				err = errors.Wrap(err, "doing until iterator: until")
			}
			it.err = err
			return false
		}

		if isUntilPassed {
			it.err = EndOfIterator
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// DoingUntil sets until checker while iterating over items.
// If untilList is empty, so all items returned as is.
func DoingUntil(items Iterator, untilList ...Checker) Iterator {
	if items == nil {
		return EmptyIterator
	}
	return &DoingUntilIterator{preparedItem{base: items}, All(untilList...)}
}

func DoUntil(items Iterator, untilList ...Checker) error {
	// no error wrapping since no additional context for the error; just return it.
	return Discard(DoingUntil(items, untilList...))
}

// GettingBatch returns the next batch from items.
func GettingBatch(items Iterator, batchSize int) Iterator {
	if items == nil {
		return EmptyIterator
	}
	if batchSize == 0 {
		return items
	}

	size := 0
	return DoingUntil(items, Check(func(item interface{}) (bool, error) {
		size++
		return size >= batchSize, nil
	}))
}
