// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
package iter

type Uint8SliceIterator struct {
	slice []uint8
	cur   int
}

// NewShowtimeUint8SliceIterator returns a new instance of Uint8SliceIterator.
// Note: any changes in slice will affect correspond items in the iterator.
// Use Uint8Unroll(slice).MakeIter() instead of to iterate over copies of item in the items.
func NewShowtimeUint8SliceIterator(slice []uint8) *Uint8SliceIterator {
	it := &Uint8SliceIterator{slice: slice}
	return it
}

func (it Uint8SliceIterator) HasNext() bool {
	return it.cur < len(it.slice)
}

func (it *Uint8SliceIterator) Next() uint8 {
	if it.cur >= len(it.slice) {
		panic("iterator next: pointer out of range")
	}

	item := it.slice[it.cur]
	it.cur++
	return item
}

func (Uint8SliceIterator) Err() error { return nil }

type InvertingUint8SliceIterator struct {
	slice []uint8
	cur   int
}

// NewInvertingShowtimeUint8SliceIterator returns a new instance of InvertingUint8SliceIterator.
// Note: any changes in slice will affect correspond items in the iterator.
// Use InvertingUint8Slice(Uint8Unroll(slice)).MakeIter() instead of to iterate over copies of item in the items.
func NewInvertingShowtimeUint8SliceIterator(slice []uint8) *InvertingUint8SliceIterator {
	it := &InvertingUint8SliceIterator{slice: slice, cur: len(slice) - 1}
	return it
}

func (it InvertingUint8SliceIterator) HasNext() bool {
	return it.cur >= 0
}

func (it *InvertingUint8SliceIterator) Next() uint8 {
	if it.cur < 0 {
		panic("iterator next: pointer out of range")
	}

	item := it.slice[it.cur]
	it.cur--
	return item
}

func (InvertingUint8SliceIterator) Err() error { return nil }

func Uint8Unroll(items Uint8Iterator) Uint8Slice {
	var slice Uint8Slice
	panicIfUint8IteratorError(Uint8Range(items, Uint8Handle(func(item uint8) error {
		slice = append(slice, item)
		return nil
	})), "unroll: discard")

	return slice
}

type Uint8Slice []uint8

func (s Uint8Slice) MakeIter() (Uint8Iterator, error) {
	return NewShowtimeUint8SliceIterator(s), nil
}

func MakeUint8SliceIter(slice []uint8) Uint8Iterator {
	items, err := Uint8Slice(slice).MakeIter()
	panicIfUint8IteratorError(err, "make slice iter")
	return items
}

type InvertingUint8Slice []uint8

func (s InvertingUint8Slice) MakeIter() (Uint8Iterator, error) {
	return NewInvertingShowtimeUint8SliceIterator(s), nil
}

func MakeInvertingUint8SliceIter(slice []uint8) Uint8Iterator {
	items, err := InvertingUint8Slice(slice).MakeIter()
	panicIfUint8IteratorError(err, "make inverting slice iter")
	return items
}

func Uint8Invert(items Uint8Iterator) Uint8Iterator {
	return MakeInvertingUint8SliceIter(Uint8Unroll(items))
}
