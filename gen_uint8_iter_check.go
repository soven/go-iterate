// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
package iter

import "github.com/pkg/errors"

type Uint8Checker interface {
	// It is suggested to return EndOfUint8Iterator to stop iteration.
	Check(uint8) (bool, error)
}

type Uint8Check func(uint8) (bool, error)

func (ch Uint8Check) Check(item uint8) (bool, error) { return ch(item) }

var (
	AlwaysUint8CheckTrue  = Uint8Check(func(item uint8) (bool, error) { return true, nil })
	AlwaysUint8CheckFalse = Uint8Check(func(item uint8) (bool, error) { return false, nil })
)

func NotUint8(checker Uint8Checker) Uint8Checker {
	if checker == nil {
		return AlwaysUint8CheckTrue
	}
	return Uint8Check(func(item uint8) (bool, error) {
		yes, err := checker.Check(item)
		if err != nil {
			// No error wrapping since an error context is missing.
			return false, err
		}

		return !yes, nil
	})
}

type andUint8 struct {
	lhs, rhs Uint8Checker
}

func (a andUint8) Check(item uint8) (bool, error) {
	isLHSPassed, err := a.lhs.Check(item)
	if err != nil {
		return false, wrapIfNotEndOfUint8Iterator(err, "lhs check")
	}
	if !isLHSPassed {
		return false, nil
	}

	isRHSPassed, err := a.rhs.Check(item)
	if err != nil {
		return false, wrapIfNotEndOfUint8Iterator(err, "rhs check")
	}
	return isRHSPassed, nil
}

func AllUint8(checkers ...Uint8Checker) Uint8Checker {
	var all Uint8Checker = AlwaysUint8CheckTrue
	for i := len(checkers) - 1; i >= 0; i-- {
		if checkers[i] == nil {
			continue
		}
		all = andUint8{checkers[i], all}
	}
	return all
}

type orUint8 struct {
	lhs, rhs Uint8Checker
}

func (o orUint8) Check(item uint8) (bool, error) {
	isLHSPassed, err := o.lhs.Check(item)
	if err != nil {
		return false, wrapIfNotEndOfUint8Iterator(err, "lhs check")
	}
	if isLHSPassed {
		return true, nil
	}

	isRHSPassed, err := o.rhs.Check(item)
	if err != nil {
		return false, wrapIfNotEndOfUint8Iterator(err, "rhs check")
	}
	return isRHSPassed, nil
}

func AnyUint8(checkers ...Uint8Checker) Uint8Checker {
	var any Uint8Checker = AlwaysUint8CheckFalse
	for i := len(checkers) - 1; i >= 0; i-- {
		if checkers[i] == nil {
			continue
		}
		any = orUint8{checkers[i], any}
	}
	return any
}

type FilteringUint8Iterator struct {
	preparedUint8Item
	filter Uint8Checker
}

func (it *FilteringUint8Iterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	for it.preparedUint8Item.HasNext() {
		next := it.base.Next()
		isFilterPassed, err := it.filter.Check(next)
		if err != nil {
			if !isEndOfUint8Iterator(err) {
				err = errors.Wrap(err, "filtering iterator: check")
			}
			it.err = err
			return false
		}

		if !isFilterPassed {
			continue
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// Uint8Filtering sets filter while iterating over items.
// If filters is empty, so all items will return.
func Uint8Filtering(items Uint8Iterator, filters ...Uint8Checker) Uint8Iterator {
	if items == nil {
		return EmptyUint8Iterator
	}
	return &FilteringUint8Iterator{preparedUint8Item{base: items}, AllUint8(filters...)}
}

func Uint8Filter(items Uint8Iterator, checker ...Uint8Checker) error {
	// no error wrapping since no additional context for the error; just return it.
	return Uint8Discard(Uint8Filtering(items, checker...))
}

type Uint8EnumChecker interface {
	// It is suggested to return EndOfUint8Iterator to stop iteration.
	Check(int, uint8) (bool, error)
}

type Uint8EnumCheck func(int, uint8) (bool, error)

func (ch Uint8EnumCheck) Check(n int, item uint8) (bool, error) { return ch(n, item) }

type enumFromUint8Checker struct {
	Uint8Checker
}

func (ch enumFromUint8Checker) Check(_ int, item uint8) (bool, error) {
	return ch.Uint8Checker.Check(item)
}

func EnumFromUint8Checker(checker Uint8Checker) Uint8EnumChecker {
	return &enumFromUint8Checker{checker}
}

var (
	AlwaysUint8EnumCheckTrue  = EnumFromUint8Checker(AlwaysUint8CheckTrue)
	AlwaysUint8EnumCheckFalse = EnumFromUint8Checker(AlwaysUint8CheckFalse)
)

func EnumNotUint8(checker Uint8EnumChecker) Uint8EnumChecker {
	if checker == nil {
		return AlwaysUint8EnumCheckTrue
	}
	return Uint8EnumCheck(func(n int, item uint8) (bool, error) {
		yes, err := checker.Check(n, item)
		if err != nil {
			// No error wrapping since an error context is missing.
			return false, err
		}

		return !yes, nil
	})
}

type enumAndUint8 struct {
	lhs, rhs Uint8EnumChecker
}

func (a enumAndUint8) Check(n int, item uint8) (bool, error) {
	isLHSPassed, err := a.lhs.Check(n, item)
	if err != nil {
		return false, wrapIfNotEndOfUint8Iterator(err, "lhs check")
	}
	if !isLHSPassed {
		return false, nil
	}

	isRHSPassed, err := a.rhs.Check(n, item)
	if err != nil {
		return false, wrapIfNotEndOfUint8Iterator(err, "rhs check")
	}
	return isRHSPassed, nil
}

func EnumAllUint8(checkers ...Uint8EnumChecker) Uint8EnumChecker {
	var all Uint8EnumChecker = AlwaysUint8EnumCheckTrue
	for i := len(checkers) - 1; i >= 0; i-- {
		if checkers[i] == nil {
			continue
		}
		all = enumAndUint8{checkers[i], all}
	}
	return all
}

type enumOrUint8 struct {
	lhs, rhs Uint8EnumChecker
}

func (o enumOrUint8) Check(n int, item uint8) (bool, error) {
	isLHSPassed, err := o.lhs.Check(n, item)
	if err != nil {
		return false, wrapIfNotEndOfUint8Iterator(err, "lhs check")
	}
	if isLHSPassed {
		return true, nil
	}

	isRHSPassed, err := o.rhs.Check(n, item)
	if err != nil {
		return false, wrapIfNotEndOfUint8Iterator(err, "rhs check")
	}
	return isRHSPassed, nil
}

func EnumAnyUint8(checkers ...Uint8EnumChecker) Uint8EnumChecker {
	var any Uint8EnumChecker = AlwaysUint8EnumCheckFalse
	for i := len(checkers) - 1; i >= 0; i-- {
		if checkers[i] == nil {
			continue
		}
		any = enumOrUint8{checkers[i], any}
	}
	return any
}

type EnumFilteringUint8Iterator struct {
	preparedUint8Item
	filter Uint8EnumChecker
	count  int
}

func (it *EnumFilteringUint8Iterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	for it.preparedUint8Item.HasNext() {
		next := it.base.Next()
		isFilterPassed, err := it.filter.Check(it.count, next)
		if err != nil {
			if !isEndOfUint8Iterator(err) {
				err = errors.Wrap(err, "enum filtering iterator: check")
			}
			it.err = err
			return false
		}
		it.count++

		if !isFilterPassed {
			continue
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// Uint8EnumFiltering sets filter while iterating over items and their serial numbers.
// If filters is empty, so all items will return.
func Uint8EnumFiltering(items Uint8Iterator, filters ...Uint8EnumChecker) Uint8Iterator {
	if items == nil {
		return EmptyUint8Iterator
	}
	return &EnumFilteringUint8Iterator{preparedUint8Item{base: items}, EnumAllUint8(filters...), 0}
}

type DoingUntilUint8Iterator struct {
	preparedUint8Item
	until Uint8Checker
}

func (it *DoingUntilUint8Iterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	for it.preparedUint8Item.HasNext() {
		next := it.base.Next()
		isUntilPassed, err := it.until.Check(next)
		if err != nil {
			if !isEndOfUint8Iterator(err) {
				err = errors.Wrap(err, "doing until iterator: until")
			}
			it.err = err
			return false
		}

		if isUntilPassed {
			it.err = EndOfUint8Iterator
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// Uint8DoingUntil sets until checker while iterating over items.
// If untilList is empty, so all items returned as is.
func Uint8DoingUntil(items Uint8Iterator, untilList ...Uint8Checker) Uint8Iterator {
	if items == nil {
		return EmptyUint8Iterator
	}
	return &DoingUntilUint8Iterator{preparedUint8Item{base: items}, AllUint8(untilList...)}
}

func Uint8DoUntil(items Uint8Iterator, untilList ...Uint8Checker) error {
	// no error wrapping since no additional context for the error; just return it.
	return Uint8Discard(Uint8DoingUntil(items, untilList...))
}

// Uint8GettingBatch returns the next batch from items.
func Uint8GettingBatch(items Uint8Iterator, batchSize int) Uint8Iterator {
	if items == nil {
		return EmptyUint8Iterator
	}
	if batchSize == 0 {
		return items
	}

	size := 0
	return Uint8DoingUntil(items, Uint8Check(func(item uint8) (bool, error) {
		size++
		return size >= batchSize, nil
	}))
}
