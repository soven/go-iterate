// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
package iter

type Int16SliceIterator struct {
	slice []int16
	cur   int
}

// NewShowtimeInt16SliceIterator returns a new instance of Int16SliceIterator.
// Note: any changes in slice will affect correspond items in the iterator.
// Use Int16Unroll(slice).MakeIter() instead of to iterate over copies of item in the items.
func NewShowtimeInt16SliceIterator(slice []int16) *Int16SliceIterator {
	it := &Int16SliceIterator{slice: slice}
	return it
}

func (it Int16SliceIterator) HasNext() bool {
	return it.cur < len(it.slice)
}

func (it *Int16SliceIterator) Next() int16 {
	if it.cur >= len(it.slice) {
		panic("iterator next: pointer out of range")
	}

	item := it.slice[it.cur]
	it.cur++
	return item
}

func (Int16SliceIterator) Err() error { return nil }

type InvertingInt16SliceIterator struct {
	slice []int16
	cur   int
}

// NewInvertingShowtimeInt16SliceIterator returns a new instance of InvertingInt16SliceIterator.
// Note: any changes in slice will affect correspond items in the iterator.
// Use InvertingInt16Slice(Int16Unroll(slice)).MakeIter() instead of to iterate over copies of item in the items.
func NewInvertingShowtimeInt16SliceIterator(slice []int16) *InvertingInt16SliceIterator {
	it := &InvertingInt16SliceIterator{slice: slice, cur: len(slice) - 1}
	return it
}

func (it InvertingInt16SliceIterator) HasNext() bool {
	return it.cur >= 0
}

func (it *InvertingInt16SliceIterator) Next() int16 {
	if it.cur < 0 {
		panic("iterator next: pointer out of range")
	}

	item := it.slice[it.cur]
	it.cur--
	return item
}

func (InvertingInt16SliceIterator) Err() error { return nil }

func Int16Unroll(items Int16Iterator) Int16Slice {
	var slice Int16Slice
	panicIfInt16IteratorError(Int16Range(items, Int16Handle(func(item int16) error {
		slice = append(slice, item)
		return nil
	})), "unroll: discard")

	return slice
}

type Int16Slice []int16

func (s Int16Slice) MakeIter() (Int16Iterator, error) {
	return NewShowtimeInt16SliceIterator(s), nil
}

func MakeInt16SliceIter(slice []int16) Int16Iterator {
	items, err := Int16Slice(slice).MakeIter()
	panicIfInt16IteratorError(err, "make slice iter")
	return items
}

type InvertingInt16Slice []int16

func (s InvertingInt16Slice) MakeIter() (Int16Iterator, error) {
	return NewInvertingShowtimeInt16SliceIterator(s), nil
}

func MakeInvertingInt16SliceIter(slice []int16) Int16Iterator {
	items, err := InvertingInt16Slice(slice).MakeIter()
	panicIfInt16IteratorError(err, "make inverting slice iter")
	return items
}

func Int16Invert(items Int16Iterator) Int16Iterator {
	return MakeInvertingInt16SliceIter(Int16Unroll(items))
}
