package iter

// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
import "github.com/pkg/errors"

type Int32Converter interface {
	// It is suggested to return EndOfInt32Iterator to stop iteration.
	Convert(int32) (int32, error)
}

type Int32Convert func(int32) (int32, error)

func (c Int32Convert) Convert(item int32) (int32, error) { return c(item) }

var NoInt32Convert = Int32Convert(func(item int32) (int32, error) { return item, nil })

type doubleInt32Converter struct {
	lhs, rhs Int32Converter
}

func (c doubleInt32Converter) Convert(item int32) (int32, error) {
	item, err := c.lhs.Convert(item)
	if err != nil {
		return 0, errors.Wrap(err, "convert lhs")
	}
	item, err = c.rhs.Convert(item)
	if err != nil {
		return 0, errors.Wrap(err, "convert rhs")
	}
	return item, nil
}

func Int32ConverterSeries(converters ...Int32Converter) Int32Converter {
	var series Int32Converter = NoInt32Convert
	for i := len(converters) - 1; i >= 0; i-- {
		if converters[i] == nil {
			continue
		}
		series = doubleInt32Converter{lhs: converters[i], rhs: series}
	}

	return series
}

type ConvertingInt32Iterator struct {
	preparedInt32Item
	converter Int32Converter
}

func (it *ConvertingInt32Iterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	if it.preparedInt32Item.HasNext() {
		next := it.base.Next()
		next, err := it.converter.Convert(next)
		if err != nil {
			if !isEndOfInt32Iterator(err) {
				err = errors.Wrap(err, "filtering iterator: check")
			}
			it.err = err
			return false
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// Int32Converting sets converter while iterating over items.
// If converters is empty, so all items will not be affected.
func Int32Converting(items Int32Iterator, converters ...Int32Converter) Int32Iterator {
	if items == nil {
		return EmptyInt32Iterator
	}
	return &ConvertingInt32Iterator{preparedInt32Item{base: items}, Int32ConverterSeries(converters...)}
}

func Int32Map(items Int32Iterator, converter ...Int32Converter) error {
	// no error wrapping since no additional context for the error; just return it.
	return Int32Discard(Int32Converting(items, converter...))
}
