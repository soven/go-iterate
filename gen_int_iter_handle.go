// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
package iter

import "github.com/pkg/errors"

type IntHandler interface {
	// It is suggested to return EndOfIntIterator to stop iteration.
	Handle(int) error
}

type IntHandle func(int) error

func (h IntHandle) Handle(item int) error { return h(item) }

var IntDoNothing = IntHandle(func(_ int) error { return nil })

type doubleIntHandler struct {
	lhs, rhs IntHandler
}

func (h doubleIntHandler) Handle(item int) error {
	err := h.lhs.Handle(item)
	if err != nil {
		return errors.Wrap(err, "handle lhs")
	}
	err = h.rhs.Handle(item)
	if err != nil {
		return errors.Wrap(err, "handle rhs")
	}
	return nil
}

func IntHandlerSeries(handlers ...IntHandler) IntHandler {
	var series IntHandler = IntDoNothing
	for i := len(handlers) - 1; i >= 0; i-- {
		if handlers[i] == nil {
			continue
		}
		series = doubleIntHandler{lhs: handlers[i], rhs: series}
	}
	return series
}

type HandlingIntIterator struct {
	preparedIntItem
	handler IntHandler
}

func (it *HandlingIntIterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	if it.preparedIntItem.HasNext() {
		next := it.base.Next()
		err := it.handler.Handle(next)
		if err != nil {
			if !isEndOfIntIterator(err) {
				err = errors.Wrap(err, "handling iterator: check")
			}
			it.err = err
			return false
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// IntHandling sets handler while iterating over items.
// If handlers is empty, so it will do nothing.
func IntHandling(items IntIterator, handlers ...IntHandler) IntIterator {
	if items == nil {
		return EmptyIntIterator
	}
	return &HandlingIntIterator{preparedIntItem{base: items}, IntHandlerSeries(handlers...)}
}

func IntRange(items IntIterator, handler ...IntHandler) error {
	// no error wrapping since no additional context for the error; just return it.
	return IntDiscard(IntHandling(items, handler...))
}

type IntEnumHandler interface {
	// It is suggested to return EndOfIntIterator to stop iteration.
	Handle(int, int) error
}

type IntEnumHandle func(int, int) error

func (h IntEnumHandle) Handle(n int, item int) error { return h(n, item) }

var IntDoEnumNothing = IntEnumHandle(func(_ int, _ int) error { return nil })

type doubleIntEnumHandler struct {
	lhs, rhs IntEnumHandler
}

func (h doubleIntEnumHandler) Handle(n int, item int) error {
	err := h.lhs.Handle(n, item)
	if err != nil {
		return errors.Wrap(err, "handle lhs")
	}
	err = h.rhs.Handle(n, item)
	if err != nil {
		return errors.Wrap(err, "handle rhs")
	}
	return nil
}

func IntEnumHandlerSeries(handlers ...IntEnumHandler) IntEnumHandler {
	var series IntEnumHandler = IntDoEnumNothing
	for i := len(handlers) - 1; i >= 0; i-- {
		if handlers[i] == nil {
			continue
		}
		series = doubleIntEnumHandler{lhs: handlers[i], rhs: series}
	}
	return series
}

type EnumHandlingIntIterator struct {
	preparedIntItem
	handler IntEnumHandler
	count   int
}

func (it *EnumHandlingIntIterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	if it.preparedIntItem.HasNext() {
		next := it.base.Next()
		err := it.handler.Handle(it.count, next)
		if err != nil {
			if !isEndOfIntIterator(err) {
				err = errors.Wrap(err, "enum handling iterator: check")
			}
			it.err = err
			return false
		}
		it.count++

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// IntEnumHandling sets handler while iterating over items with their serial number.
// If handlers is empty, so it will do nothing.
func IntEnumHandling(items IntIterator, handlers ...IntEnumHandler) IntIterator {
	if items == nil {
		return EmptyIntIterator
	}
	return &EnumHandlingIntIterator{
		preparedIntItem{base: items}, IntEnumHandlerSeries(handlers...), 0}
}

func IntEnumerate(items IntIterator, handler ...IntEnumHandler) error {
	// no error wrapping since no additional context for the error; just return it.
	return IntDiscard(IntEnumHandling(items, handler...))
}
