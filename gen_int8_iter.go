// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
package iter

type Int8Iterator interface {
	// HasNext checks if there is the next item
	// in the iterator. HasNext should be idempotent.
	HasNext() bool
	// Next should be invoked after check HasNext.
	Next() int8
	// Err contains first met error while Next.
	Err() error
}

type emptyInt8Iterator struct{}

func (emptyInt8Iterator) HasNext() bool     { return false }
func (emptyInt8Iterator) Next() (next int8) { return 0 }
func (emptyInt8Iterator) Err() error        { return nil }

var EmptyInt8Iterator = emptyInt8Iterator{}

type Int8IterMaker interface {
	MakeIter() (Int8Iterator, error)
}

type MakeInt8Iter func() (Int8Iterator, error)

func (m MakeInt8Iter) MakeIter() (Int8Iterator, error) { return m() }

var MakeNoInt8Iter = MakeInt8Iter(func() (Int8Iterator, error) { return EmptyInt8Iterator, nil })

// Int8Discard just range over all items and do nothing with each of them.
func Int8Discard(items Int8Iterator) error {
	if items == nil {
		return nil
	}
	for items.HasNext() {
		_ = items.Next()
	}
	// no error wrapping since no additional context for the error; just return it.
	return items.Err()
}
