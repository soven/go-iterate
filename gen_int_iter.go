// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
package iter

type IntIterator interface {
	// HasNext checks if there is the next item
	// in the iterator. HasNext should be idempotent.
	HasNext() bool
	// Next should be invoked after check HasNext.
	Next() int
	// Err contains first met error while Next.
	Err() error
}

type emptyIntIterator struct{}

func (emptyIntIterator) HasNext() bool    { return false }
func (emptyIntIterator) Next() (next int) { return 0 }
func (emptyIntIterator) Err() error       { return nil }

var EmptyIntIterator = emptyIntIterator{}

type IntIterMaker interface {
	MakeIter() (IntIterator, error)
}

type MakeIntIter func() (IntIterator, error)

func (m MakeIntIter) MakeIter() (IntIterator, error) { return m() }

var MakeNoIntIter = MakeIntIter(func() (IntIterator, error) { return EmptyIntIterator, nil })

// IntDiscard just range over all items and do nothing with each of them.
func IntDiscard(items IntIterator) error {
	if items == nil {
		return nil
	}
	for items.HasNext() {
		_ = items.Next()
	}
	// no error wrapping since no additional context for the error; just return it.
	return items.Err()
}
