// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
package iter

type RuneSliceIterator struct {
	slice []rune
	cur   int
}

// NewShowtimeRuneSliceIterator returns a new instance of RuneSliceIterator.
// Note: any changes in slice will affect correspond items in the iterator.
// Use RuneUnroll(slice).MakeIter() instead of to iterate over copies of item in the items.
func NewShowtimeRuneSliceIterator(slice []rune) *RuneSliceIterator {
	it := &RuneSliceIterator{slice: slice}
	return it
}

func (it RuneSliceIterator) HasNext() bool {
	return it.cur < len(it.slice)
}

func (it *RuneSliceIterator) Next() rune {
	if it.cur >= len(it.slice) {
		panic("iterator next: pointer out of range")
	}

	item := it.slice[it.cur]
	it.cur++
	return item
}

func (RuneSliceIterator) Err() error { return nil }

type InvertingRuneSliceIterator struct {
	slice []rune
	cur   int
}

// NewInvertingShowtimeRuneSliceIterator returns a new instance of InvertingRuneSliceIterator.
// Note: any changes in slice will affect correspond items in the iterator.
// Use InvertingRuneSlice(RuneUnroll(slice)).MakeIter() instead of to iterate over copies of item in the items.
func NewInvertingShowtimeRuneSliceIterator(slice []rune) *InvertingRuneSliceIterator {
	it := &InvertingRuneSliceIterator{slice: slice, cur: len(slice) - 1}
	return it
}

func (it InvertingRuneSliceIterator) HasNext() bool {
	return it.cur >= 0
}

func (it *InvertingRuneSliceIterator) Next() rune {
	if it.cur < 0 {
		panic("iterator next: pointer out of range")
	}

	item := it.slice[it.cur]
	it.cur--
	return item
}

func (InvertingRuneSliceIterator) Err() error { return nil }

func RuneUnroll(items RuneIterator) RuneSlice {
	var slice RuneSlice
	panicIfRuneIteratorError(RuneRange(items, RuneHandle(func(item rune) error {
		slice = append(slice, item)
		return nil
	})), "unroll: discard")

	return slice
}

type RuneSlice []rune

func (s RuneSlice) MakeIter() (RuneIterator, error) {
	return NewShowtimeRuneSliceIterator(s), nil
}

func MakeRuneSliceIter(slice []rune) RuneIterator {
	items, err := RuneSlice(slice).MakeIter()
	panicIfRuneIteratorError(err, "make slice iter")
	return items
}

type InvertingRuneSlice []rune

func (s InvertingRuneSlice) MakeIter() (RuneIterator, error) {
	return NewInvertingShowtimeRuneSliceIterator(s), nil
}

func MakeInvertingRuneSliceIter(slice []rune) RuneIterator {
	items, err := InvertingRuneSlice(slice).MakeIter()
	panicIfRuneIteratorError(err, "make inverting slice iter")
	return items
}

func RuneInvert(items RuneIterator) RuneIterator {
	return MakeInvertingRuneSliceIter(RuneUnroll(items))
}
