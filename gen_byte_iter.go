// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
package iter

type ByteIterator interface {
	// HasNext checks if there is the next item
	// in the iterator. HasNext should be idempotent.
	HasNext() bool
	// Next should be invoked after check HasNext.
	Next() byte
	// Err contains first met error while Next.
	Err() error
}

type emptyByteIterator struct{}

func (emptyByteIterator) HasNext() bool     { return false }
func (emptyByteIterator) Next() (next byte) { return 0 }
func (emptyByteIterator) Err() error        { return nil }

var EmptyByteIterator = emptyByteIterator{}

type ByteIterMaker interface {
	MakeIter() (ByteIterator, error)
}

type MakeByteIter func() (ByteIterator, error)

func (m MakeByteIter) MakeIter() (ByteIterator, error) { return m() }

var MakeNoByteIter = MakeByteIter(func() (ByteIterator, error) { return EmptyByteIterator, nil })

// ByteDiscard just range over all items and do nothing with each of them.
func ByteDiscard(items ByteIterator) error {
	if items == nil {
		return nil
	}
	for items.HasNext() {
		_ = items.Next()
	}
	// no error wrapping since no additional context for the error; just return it.
	return items.Err()
}
