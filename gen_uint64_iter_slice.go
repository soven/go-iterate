// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
package iter

type Uint64SliceIterator struct {
	slice []uint64
	cur   int
}

// NewShowtimeUint64SliceIterator returns a new instance of Uint64SliceIterator.
// Note: any changes in slice will affect correspond items in the iterator.
// Use Uint64Unroll(slice).MakeIter() instead of to iterate over copies of item in the items.
func NewShowtimeUint64SliceIterator(slice []uint64) *Uint64SliceIterator {
	it := &Uint64SliceIterator{slice: slice}
	return it
}

func (it Uint64SliceIterator) HasNext() bool {
	return it.cur < len(it.slice)
}

func (it *Uint64SliceIterator) Next() uint64 {
	if it.cur >= len(it.slice) {
		panic("iterator next: pointer out of range")
	}

	item := it.slice[it.cur]
	it.cur++
	return item
}

func (Uint64SliceIterator) Err() error { return nil }

type InvertingUint64SliceIterator struct {
	slice []uint64
	cur   int
}

// NewInvertingShowtimeUint64SliceIterator returns a new instance of InvertingUint64SliceIterator.
// Note: any changes in slice will affect correspond items in the iterator.
// Use InvertingUint64Slice(Uint64Unroll(slice)).MakeIter() instead of to iterate over copies of item in the items.
func NewInvertingShowtimeUint64SliceIterator(slice []uint64) *InvertingUint64SliceIterator {
	it := &InvertingUint64SliceIterator{slice: slice, cur: len(slice) - 1}
	return it
}

func (it InvertingUint64SliceIterator) HasNext() bool {
	return it.cur >= 0
}

func (it *InvertingUint64SliceIterator) Next() uint64 {
	if it.cur < 0 {
		panic("iterator next: pointer out of range")
	}

	item := it.slice[it.cur]
	it.cur--
	return item
}

func (InvertingUint64SliceIterator) Err() error { return nil }

func Uint64Unroll(items Uint64Iterator) Uint64Slice {
	var slice Uint64Slice
	panicIfUint64IteratorError(Uint64Range(items, Uint64Handle(func(item uint64) error {
		slice = append(slice, item)
		return nil
	})), "unroll: discard")

	return slice
}

type Uint64Slice []uint64

func (s Uint64Slice) MakeIter() (Uint64Iterator, error) {
	return NewShowtimeUint64SliceIterator(s), nil
}

func MakeUint64SliceIter(slice []uint64) Uint64Iterator {
	items, err := Uint64Slice(slice).MakeIter()
	panicIfUint64IteratorError(err, "make slice iter")
	return items
}

type InvertingUint64Slice []uint64

func (s InvertingUint64Slice) MakeIter() (Uint64Iterator, error) {
	return NewInvertingShowtimeUint64SliceIterator(s), nil
}

func MakeInvertingUint64SliceIter(slice []uint64) Uint64Iterator {
	items, err := InvertingUint64Slice(slice).MakeIter()
	panicIfUint64IteratorError(err, "make inverting slice iter")
	return items
}

func Uint64Invert(items Uint64Iterator) Uint64Iterator {
	return MakeInvertingUint64SliceIter(Uint64Unroll(items))
}
