// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
package iter

type Int32SliceIterator struct {
	slice []int32
	cur   int
}

// NewShowtimeInt32SliceIterator returns a new instance of Int32SliceIterator.
// Note: any changes in slice will affect correspond items in the iterator.
// Use Int32Unroll(slice).MakeIter() instead of to iterate over copies of item in the items.
func NewShowtimeInt32SliceIterator(slice []int32) *Int32SliceIterator {
	it := &Int32SliceIterator{slice: slice}
	return it
}

func (it Int32SliceIterator) HasNext() bool {
	return it.cur < len(it.slice)
}

func (it *Int32SliceIterator) Next() int32 {
	if it.cur >= len(it.slice) {
		panic("iterator next: pointer out of range")
	}

	item := it.slice[it.cur]
	it.cur++
	return item
}

func (Int32SliceIterator) Err() error { return nil }

type InvertingInt32SliceIterator struct {
	slice []int32
	cur   int
}

// NewInvertingShowtimeInt32SliceIterator returns a new instance of InvertingInt32SliceIterator.
// Note: any changes in slice will affect correspond items in the iterator.
// Use InvertingInt32Slice(Int32Unroll(slice)).MakeIter() instead of to iterate over copies of item in the items.
func NewInvertingShowtimeInt32SliceIterator(slice []int32) *InvertingInt32SliceIterator {
	it := &InvertingInt32SliceIterator{slice: slice, cur: len(slice) - 1}
	return it
}

func (it InvertingInt32SliceIterator) HasNext() bool {
	return it.cur >= 0
}

func (it *InvertingInt32SliceIterator) Next() int32 {
	if it.cur < 0 {
		panic("iterator next: pointer out of range")
	}

	item := it.slice[it.cur]
	it.cur--
	return item
}

func (InvertingInt32SliceIterator) Err() error { return nil }

func Int32Unroll(items Int32Iterator) Int32Slice {
	var slice Int32Slice
	panicIfInt32IteratorError(Int32Range(items, Int32Handle(func(item int32) error {
		slice = append(slice, item)
		return nil
	})), "unroll: discard")

	return slice
}

type Int32Slice []int32

func (s Int32Slice) MakeIter() (Int32Iterator, error) {
	return NewShowtimeInt32SliceIterator(s), nil
}

func MakeInt32SliceIter(slice []int32) Int32Iterator {
	items, err := Int32Slice(slice).MakeIter()
	panicIfInt32IteratorError(err, "make slice iter")
	return items
}

type InvertingInt32Slice []int32

func (s InvertingInt32Slice) MakeIter() (Int32Iterator, error) {
	return NewInvertingShowtimeInt32SliceIterator(s), nil
}

func MakeInvertingInt32SliceIter(slice []int32) Int32Iterator {
	items, err := InvertingInt32Slice(slice).MakeIter()
	panicIfInt32IteratorError(err, "make inverting slice iter")
	return items
}

func Int32Invert(items Int32Iterator) Int32Iterator {
	return MakeInvertingInt32SliceIter(Int32Unroll(items))
}
