package iter

// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
import "github.com/pkg/errors"

type ByteConverter interface {
	// It is suggested to return EndOfByteIterator to stop iteration.
	Convert(byte) (byte, error)
}

type ByteConvert func(byte) (byte, error)

func (c ByteConvert) Convert(item byte) (byte, error) { return c(item) }

var NoByteConvert = ByteConvert(func(item byte) (byte, error) { return item, nil })

type doubleByteConverter struct {
	lhs, rhs ByteConverter
}

func (c doubleByteConverter) Convert(item byte) (byte, error) {
	item, err := c.lhs.Convert(item)
	if err != nil {
		return 0, errors.Wrap(err, "convert lhs")
	}
	item, err = c.rhs.Convert(item)
	if err != nil {
		return 0, errors.Wrap(err, "convert rhs")
	}
	return item, nil
}

func ByteConverterSeries(converters ...ByteConverter) ByteConverter {
	var series ByteConverter = NoByteConvert
	for i := len(converters) - 1; i >= 0; i-- {
		if converters[i] == nil {
			continue
		}
		series = doubleByteConverter{lhs: converters[i], rhs: series}
	}

	return series
}

type ConvertingByteIterator struct {
	preparedByteItem
	converter ByteConverter
}

func (it *ConvertingByteIterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	if it.preparedByteItem.HasNext() {
		next := it.base.Next()
		next, err := it.converter.Convert(next)
		if err != nil {
			if !isEndOfByteIterator(err) {
				err = errors.Wrap(err, "filtering iterator: check")
			}
			it.err = err
			return false
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// ByteConverting sets converter while iterating over items.
// If converters is empty, so all items will not be affected.
func ByteConverting(items ByteIterator, converters ...ByteConverter) ByteIterator {
	if items == nil {
		return EmptyByteIterator
	}
	return &ConvertingByteIterator{preparedByteItem{base: items}, ByteConverterSeries(converters...)}
}

func ByteMap(items ByteIterator, converter ...ByteConverter) error {
	// no error wrapping since no additional context for the error; just return it.
	return ByteDiscard(ByteConverting(items, converter...))
}
