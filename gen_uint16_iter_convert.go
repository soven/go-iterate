package iter

// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
import "github.com/pkg/errors"

type Uint16Converter interface {
	// It is suggested to return EndOfUint16Iterator to stop iteration.
	Convert(uint16) (uint16, error)
}

type Uint16Convert func(uint16) (uint16, error)

func (c Uint16Convert) Convert(item uint16) (uint16, error) { return c(item) }

var NoUint16Convert = Uint16Convert(func(item uint16) (uint16, error) { return item, nil })

type doubleUint16Converter struct {
	lhs, rhs Uint16Converter
}

func (c doubleUint16Converter) Convert(item uint16) (uint16, error) {
	item, err := c.lhs.Convert(item)
	if err != nil {
		return 0, errors.Wrap(err, "convert lhs")
	}
	item, err = c.rhs.Convert(item)
	if err != nil {
		return 0, errors.Wrap(err, "convert rhs")
	}
	return item, nil
}

func Uint16ConverterSeries(converters ...Uint16Converter) Uint16Converter {
	var series Uint16Converter = NoUint16Convert
	for i := len(converters) - 1; i >= 0; i-- {
		if converters[i] == nil {
			continue
		}
		series = doubleUint16Converter{lhs: converters[i], rhs: series}
	}

	return series
}

type ConvertingUint16Iterator struct {
	preparedUint16Item
	converter Uint16Converter
}

func (it *ConvertingUint16Iterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	if it.preparedUint16Item.HasNext() {
		next := it.base.Next()
		next, err := it.converter.Convert(next)
		if err != nil {
			if !isEndOfUint16Iterator(err) {
				err = errors.Wrap(err, "filtering iterator: check")
			}
			it.err = err
			return false
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// Uint16Converting sets converter while iterating over items.
// If converters is empty, so all items will not be affected.
func Uint16Converting(items Uint16Iterator, converters ...Uint16Converter) Uint16Iterator {
	if items == nil {
		return EmptyUint16Iterator
	}
	return &ConvertingUint16Iterator{preparedUint16Item{base: items}, Uint16ConverterSeries(converters...)}
}

func Uint16Map(items Uint16Iterator, converter ...Uint16Converter) error {
	// no error wrapping since no additional context for the error; just return it.
	return Uint16Discard(Uint16Converting(items, converter...))
}
