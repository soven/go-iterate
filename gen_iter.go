// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
package iter

type Iterator interface {
	// HasNext checks if there is the next item
	// in the iterator. HasNext should be idempotent.
	HasNext() bool
	// Next should be invoked after check HasNext.
	Next() interface{}
	// Err contains first met error while Next.
	Err() error
}

type emptyIterator struct{}

func (emptyIterator) HasNext() bool            { return false }
func (emptyIterator) Next() (next interface{}) { return nil }
func (emptyIterator) Err() error               { return nil }

var EmptyIterator = emptyIterator{}

type IterMaker interface {
	MakeIter() (Iterator, error)
}

type MakeIter func() (Iterator, error)

func (m MakeIter) MakeIter() (Iterator, error) { return m() }

var MakeNoIter = MakeIter(func() (Iterator, error) { return EmptyIterator, nil })

// Discard just range over all items and do nothing with each of them.
func Discard(items Iterator) error {
	if items == nil {
		return nil
	}
	for items.HasNext() {
		_ = items.Next()
	}
	// no error wrapping since no additional context for the error; just return it.
	return items.Err()
}
