// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
package {{ .PackageName }}

import "github.com/pkg/errors"

// {{ .TitlePrefix }}Converter is an object converting an item type of {{ .TypeName }}.
type {{ .TitlePrefix }}Converter interface {
	// Convert should convert an item type of {{ .TypeName }} into another item of {{ .TypeName }}.
	// It is suggested to return EndOf{{ .TitlePrefix }}Iterator to stop iteration.
	Convert({{ .TypeName }}) ({{ .TypeName }}, error)
}

// {{ .TitlePrefix }}Convert is a shortcut implementation
// of {{ .TitlePrefix }}Converter based on a function.
type {{ .TitlePrefix }}Convert func({{ .TypeName }}) ({{ .TypeName }}, error)

// Convert converts an item type of {{ .TypeName }} into another item of {{ .TypeName }}.
// It is suggested to return EndOf{{ .TitlePrefix }}Iterator to stop iteration.
func (c {{ .TitlePrefix }}Convert) Convert(item {{ .TypeName }}) ({{ .TypeName }}, error) { return c(item) }

// No{{ .TitlePrefix }}Convert does nothing with item, just returns it as is.
var No{{ .TitlePrefix }}Convert {{ .TitlePrefix }}Converter = {{ .TitlePrefix }}Convert(
	func(item {{ .TypeName }}) ({{ .TypeName }}, error) { return item, nil })

type double{{ .TitlePrefix }}Converter struct {
	lhs, rhs {{ .TitlePrefix }}Converter
}

func (c double{{ .TitlePrefix }}Converter) Convert(item {{ .TypeName }}) ({{ .TypeName }}, error) {
	item, err := c.lhs.Convert(item)
	if err != nil {
		return {{ .ZeroTypeValue }}, errors.Wrap(err, "convert lhs")
	}
	item, err = c.rhs.Convert(item)
	if err != nil {
		return {{ .ZeroTypeValue }}, errors.Wrap(err, "convert rhs")
	}
	return item, nil
}

// {{ .TitlePrefix }}ConverterSeries combines all the given converters to sequenced one
// It returns no converter if the list of converters is empty.
func {{ .TitlePrefix }}ConverterSeries(converters ...{{ .TitlePrefix }}Converter) {{ .TitlePrefix }}Converter {
	var series = No{{ .TitlePrefix }}Convert
	for i := len(converters) - 1; i >= 0; i-- {
		if converters[i] == nil {
			continue
		}
		series = double{{ .TitlePrefix }}Converter{lhs: converters[i], rhs: series}
	}

	return series
}

// Converting{{ .TitlePrefix }}Iterator does iteration with
// converting by previously set converter.
type Converting{{ .TitlePrefix }}Iterator struct {
	prepared{{ .TitlePrefix }}Item
	converter {{ .TitlePrefix }}Converter
}

// HasNext checks if there is the next item
// in the iterator. HasNext is idempotent.
func (it *Converting{{ .TitlePrefix }}Iterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	if it.prepared{{ .TitlePrefix }}Item.HasNext() {
		next := it.base.Next()
		next, err := it.converter.Convert(next)
		if err != nil {
			if !isEndOf{{ .TitlePrefix }}Iterator(err) {
				err = errors.Wrap(err, "converting iterator: check")
			}
			it.err = err
			return false
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// {{ .TitlePrefix }}Converting sets converter while iterating over items.
// If converters is empty, so all items will not be affected.
func {{ .TitlePrefix }}Converting(items {{ .TitlePrefix }}Iterator, converters ...{{ .TitlePrefix }}Converter) {{ .TitlePrefix }}Iterator {
	if items == nil {
		return Empty{{ .TitlePrefix }}Iterator
	}
	return &Converting{{ .TitlePrefix }}Iterator{
		prepared{{ .TitlePrefix }}Item{base: items}, {{ .TitlePrefix }}ConverterSeries(converters...)}
}

// {{ .TitlePrefix }}EnumConverter is an object converting an item type of {{ .TypeName }} and its ordering number.
type {{ .TitlePrefix }}EnumConverter interface {
	// Convert should convert an item type of {{ .TypeName }} into another item of {{ .TypeName }}.
	// It is suggested to return EndOf{{ .TitlePrefix }}Iterator to stop iteration.
	Convert(n int, val {{ .TypeName }}) ({{ .TypeName }}, error)
}

// {{ .TitlePrefix }}EnumConvert is a shortcut implementation
// of {{ .TitlePrefix }}EnumConverter based on a function.
type {{ .TitlePrefix }}EnumConvert func(int, {{ .TypeName }}) ({{ .TypeName }}, error)

// Convert converts an item type of {{ .TypeName }} into another item of {{ .TypeName }}.
// It is suggested to return EndOf{{ .TitlePrefix }}Iterator to stop iteration.
func (c {{ .TitlePrefix }}EnumConvert) Convert(n int, item {{ .TypeName }}) ({{ .TypeName }}, error) { return c(n, item) }

// No{{ .TitlePrefix }}EnumConvert does nothing with item, just returns it as is.
var No{{ .TitlePrefix }}EnumConvert {{ .TitlePrefix }}EnumConverter = {{ .TitlePrefix }}EnumConvert(
	func(_ int, item {{ .TypeName }}) ({{ .TypeName }}, error) { return item, nil })

type enumFrom{{ .TitlePrefix }}Converter struct {
	{{ .TitlePrefix }}Converter
}

func (ch enumFrom{{ .TitlePrefix }}Converter) Convert(_ int, item {{ .TypeName }}) ({{ .TypeName }}, error) {
	return ch.{{ .TitlePrefix }}Converter.Convert(item)
}

// EnumFrom{{ .TitlePrefix }}Converter adapts checker type of {{ .TitlePrefix }}Converter
// to the interface {{ .TitlePrefix }}EnumConverter.
// If converter is nil it is return based on No{{ .TitlePrefix }}Convert enum checker.
func EnumFrom{{ .TitlePrefix }}Converter(converter {{ .TitlePrefix }}Converter) {{ .TitlePrefix }}EnumConverter {
	if converter == nil {
		converter = No{{ .TitlePrefix }}Convert
	}
	return &enumFrom{{ .TitlePrefix }}Converter{converter}
}

type double{{ .TitlePrefix }}EnumConverter struct {
	lhs, rhs {{ .TitlePrefix }}EnumConverter
}

func (c double{{ .TitlePrefix }}EnumConverter) Convert(n int, item {{ .TypeName }}) ({{ .TypeName }}, error) {
	item, err := c.lhs.Convert(n, item)
	if err != nil {
		return {{ .ZeroTypeValue }}, errors.Wrap(err, "convert lhs")
	}
	item, err = c.rhs.Convert(n, item)
	if err != nil {
		return {{ .ZeroTypeValue }}, errors.Wrap(err, "convert rhs")
	}
	return item, nil
}

// Enum{{ .TitlePrefix }}ConverterSeries combines all the given converters to sequenced one
// It returns no converter if the list of converters is empty.
func Enum{{ .TitlePrefix }}ConverterSeries(converters ...{{ .TitlePrefix }}EnumConverter) {{ .TitlePrefix }}EnumConverter {
	var series = No{{ .TitlePrefix }}EnumConvert
	for i := len(converters) - 1; i >= 0; i-- {
		if converters[i] == nil {
			continue
		}
		series = double{{ .TitlePrefix }}EnumConverter{lhs: converters[i], rhs: series}
	}

	return series
}

// EnumConverting{{ .TitlePrefix }}Iterator does iteration with
// converting by previously set converter.
type EnumConverting{{ .TitlePrefix }}Iterator struct {
	prepared{{ .TitlePrefix }}Item
	converter {{ .TitlePrefix }}EnumConverter
	count     int
}

// HasNext checks if there is the next item
// in the iterator. HasNext is idempotent.
func (it *EnumConverting{{ .TitlePrefix }}Iterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	if it.prepared{{ .TitlePrefix }}Item.HasNext() {
		next := it.base.Next()
		next, err := it.converter.Convert(it.count, next)
		if err != nil {
			if !isEndOf{{ .TitlePrefix }}Iterator(err) {
				err = errors.Wrap(err, "converting iterator: check")
			}
			it.err = err
			return false
		}
		it.count++

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// {{ .TitlePrefix }}EnumConverting sets converter while iterating over items and their ordering numbers.
// If converters is empty, so all items will not be affected.
func {{ .TitlePrefix }}EnumConverting(items {{ .TitlePrefix }}Iterator, converters ...{{ .TitlePrefix }}EnumConverter) {{ .TitlePrefix }}Iterator {
	if items == nil {
		return Empty{{ .TitlePrefix }}Iterator
	}
	return &EnumConverting{{ .TitlePrefix }}Iterator{
		prepared{{ .TitlePrefix }}Item{base: items}, Enum{{ .TitlePrefix }}ConverterSeries(converters...), 0}
}
