// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
package {{ .PackageName }}

import "github.com/pkg/errors"

// {{ .TitlePrefix }}Handler is an object handling an item type of {{ .TypeName }}.
type {{ .TitlePrefix }}Handler interface {
	// Handle should do something with item of {{ .TypeName }}.
	// It is suggested to return EndOf{{ .TitlePrefix }}Iterator to stop iteration.
	Handle({{ .TypeName }}) error
}

// {{ .TitlePrefix }}Handle is a shortcut implementation
// of {{ .TitlePrefix }}Handler based on a function.
type {{ .TitlePrefix }}Handle func({{ .TypeName }}) error

// Handle does something with item of {{ .TypeName }}.
// It is suggested to return EndOf{{ .TitlePrefix }}Iterator to stop iteration.
func (h {{ .TitlePrefix }}Handle) Handle(item {{ .TypeName }}) error { return h(item) }

// {{ .TitlePrefix }}DoNothing does nothing.
var {{ .TitlePrefix }}DoNothing {{ .TitlePrefix }}Handler = {{ .TitlePrefix }}Handle(func(_ {{ .TypeName }}) error { return nil })

type double{{ .TitlePrefix }}Handler struct {
	lhs, rhs {{ .TitlePrefix }}Handler
}

func (h double{{ .TitlePrefix }}Handler) Handle(item {{ .TypeName }}) error {
	err := h.lhs.Handle(item)
	if err != nil {
		return errors.Wrap(err, "handle lhs")
	}
	err = h.rhs.Handle(item)
	if err != nil {
		return errors.Wrap(err, "handle rhs")
	}
	return nil
}

// {{ .TitlePrefix }}HandlerSeries combines all the given handlers to sequenced one
// It returns do nothing handler if the list of handlers is empty.
func {{ .TitlePrefix }}HandlerSeries(handlers ...{{ .TitlePrefix }}Handler) {{ .TitlePrefix }}Handler {
	var series = {{ .TitlePrefix }}DoNothing
	for i := len(handlers) - 1; i >= 0; i-- {
		if handlers[i] == nil {
			continue
		}
		series = double{{ .TitlePrefix }}Handler{lhs: handlers[i], rhs: series}
	}
	return series
}

// Handling{{ .TitlePrefix }}Iterator does iteration with
// handling by previously set handler.
type Handling{{ .TitlePrefix }}Iterator struct {
	prepared{{ .TitlePrefix }}Item
	handler {{ .TitlePrefix }}Handler
}

// HasNext checks if there is the next item
// in the iterator. HasNext is idempotent.
func (it *Handling{{ .TitlePrefix }}Iterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	if it.prepared{{ .TitlePrefix }}Item.HasNext() {
		next := it.base.Next()
		err := it.handler.Handle(next)
		if err != nil {
			if !isEndOf{{ .TitlePrefix }}Iterator(err) {
				err = errors.Wrap(err, "handling iterator: check")
			}
			it.err = err
			return false
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// {{ .TitlePrefix }}Handling sets handler while iterating over items.
// If handlers is empty, so it will do nothing.
func {{ .TitlePrefix }}Handling(items {{ .TitlePrefix }}Iterator, handlers ...{{ .TitlePrefix }}Handler) {{ .TitlePrefix }}Iterator {
	if items == nil {
		return Empty{{ .TitlePrefix }}Iterator
	}
	return &Handling{{ .TitlePrefix }}Iterator{
		prepared{{ .TitlePrefix }}Item{base: items}, {{ .TitlePrefix }}HandlerSeries(handlers...)}
}

// {{ .TitlePrefix }}EnumHandler is an object handling an item type of {{ .TypeName }} and its ordered number.
type {{ .TitlePrefix }}EnumHandler interface {
	// Handle should do something with item of {{ .TypeName }} and its ordered number.
	// It is suggested to return EndOf{{ .TitlePrefix }}Iterator to stop iteration.
	Handle(int, {{ .TypeName }}) error
}

// {{ .TitlePrefix }}EnumHandle is a shortcut implementation
// of {{ .TitlePrefix }}EnumHandler based on a function.
type {{ .TitlePrefix }}EnumHandle func(int, {{ .TypeName }}) error

// Handle does something with item of {{ .TypeName }} and its ordered number.
// It is suggested to return EndOf{{ .TitlePrefix }}Iterator to stop iteration.
func (h {{ .TitlePrefix }}EnumHandle) Handle(n int, item {{ .TypeName }}) error { return h(n, item) }

// {{ .TitlePrefix }}DoEnumNothing does nothing.
var {{ .TitlePrefix }}DoEnumNothing = {{ .TitlePrefix }}EnumHandle(func(_ int, _ {{ .TypeName }}) error { return nil })

type double{{ .TitlePrefix }}EnumHandler struct {
	lhs, rhs {{ .TitlePrefix }}EnumHandler
}

func (h double{{ .TitlePrefix }}EnumHandler) Handle(n int, item {{ .TypeName }}) error {
	err := h.lhs.Handle(n, item)
	if err != nil {
		return errors.Wrap(err, "handle lhs")
	}
	err = h.rhs.Handle(n, item)
	if err != nil {
		return errors.Wrap(err, "handle rhs")
	}
	return nil
}

// {{ .TitlePrefix }}EnumHandlerSeries combines all the given handlers to sequenced one
// It returns do nothing handler if the list of handlers is empty.
func {{ .TitlePrefix }}EnumHandlerSeries(handlers ...{{ .TitlePrefix }}EnumHandler) {{ .TitlePrefix }}EnumHandler {
	var series {{ .TitlePrefix }}EnumHandler = {{ .TitlePrefix }}DoEnumNothing
	for i := len(handlers) - 1; i >= 0; i-- {
		if handlers[i] == nil {
			continue
		}
		series = double{{ .TitlePrefix }}EnumHandler{lhs: handlers[i], rhs: series}
	}
	return series
}

// EnumHandling{{ .TitlePrefix }}Iterator does iteration with
// handling by previously set handler.
type EnumHandling{{ .TitlePrefix }}Iterator struct {
	prepared{{ .TitlePrefix }}Item
	handler {{ .TitlePrefix }}EnumHandler
	count   int
}

// HasNext checks if there is the next item
// in the iterator. HasNext is idempotent.
func (it *EnumHandling{{ .TitlePrefix }}Iterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	if it.prepared{{ .TitlePrefix }}Item.HasNext() {
		next := it.base.Next()
		err := it.handler.Handle(it.count, next)
		if err != nil {
			if !isEndOf{{ .TitlePrefix }}Iterator(err) {
				err = errors.Wrap(err, "enum handling iterator: check")
			}
			it.err = err
			return false
		}
		it.count++

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// {{ .TitlePrefix }}EnumHandling sets handler while iterating over items with their serial number.
// If handlers is empty, so it will do nothing.
func {{ .TitlePrefix }}EnumHandling(items {{ .TitlePrefix }}Iterator, handlers ...{{ .TitlePrefix }}EnumHandler) {{ .TitlePrefix }}Iterator {
	if items == nil {
		return Empty{{ .TitlePrefix }}Iterator
	}
	return &EnumHandling{{ .TitlePrefix }}Iterator{
		prepared{{ .TitlePrefix }}Item{base: items}, {{ .TitlePrefix }}EnumHandlerSeries(handlers...), 0}
}
