// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
package iter

type ByteSliceIterator struct {
	slice []byte
	cur   int
}

// NewShowtimeByteSliceIterator returns a new instance of ByteSliceIterator.
// Note: any changes in slice will affect correspond items in the iterator.
// Use ByteUnroll(slice).MakeIter() instead of to iterate over copies of item in the items.
func NewShowtimeByteSliceIterator(slice []byte) *ByteSliceIterator {
	it := &ByteSliceIterator{slice: slice}
	return it
}

func (it ByteSliceIterator) HasNext() bool {
	return it.cur < len(it.slice)
}

func (it *ByteSliceIterator) Next() byte {
	if it.cur >= len(it.slice) {
		panic("iterator next: pointer out of range")
	}

	item := it.slice[it.cur]
	it.cur++
	return item
}

func (ByteSliceIterator) Err() error { return nil }

type InvertingByteSliceIterator struct {
	slice []byte
	cur   int
}

// NewInvertingShowtimeByteSliceIterator returns a new instance of InvertingByteSliceIterator.
// Note: any changes in slice will affect correspond items in the iterator.
// Use InvertingByteSlice(ByteUnroll(slice)).MakeIter() instead of to iterate over copies of item in the items.
func NewInvertingShowtimeByteSliceIterator(slice []byte) *InvertingByteSliceIterator {
	it := &InvertingByteSliceIterator{slice: slice, cur: len(slice) - 1}
	return it
}

func (it InvertingByteSliceIterator) HasNext() bool {
	return it.cur >= 0
}

func (it *InvertingByteSliceIterator) Next() byte {
	if it.cur < 0 {
		panic("iterator next: pointer out of range")
	}

	item := it.slice[it.cur]
	it.cur--
	return item
}

func (InvertingByteSliceIterator) Err() error { return nil }

func ByteUnroll(items ByteIterator) ByteSlice {
	var slice ByteSlice
	panicIfByteIteratorError(ByteRange(items, ByteHandle(func(item byte) error {
		slice = append(slice, item)
		return nil
	})), "unroll: discard")

	return slice
}

type ByteSlice []byte

func (s ByteSlice) MakeIter() (ByteIterator, error) {
	return NewShowtimeByteSliceIterator(s), nil
}

func MakeByteSliceIter(slice []byte) ByteIterator {
	items, err := ByteSlice(slice).MakeIter()
	panicIfByteIteratorError(err, "make slice iter")
	return items
}

type InvertingByteSlice []byte

func (s InvertingByteSlice) MakeIter() (ByteIterator, error) {
	return NewInvertingShowtimeByteSliceIterator(s), nil
}

func MakeInvertingByteSliceIter(slice []byte) ByteIterator {
	items, err := InvertingByteSlice(slice).MakeIter()
	panicIfByteIteratorError(err, "make inverting slice iter")
	return items
}

func ByteInvert(items ByteIterator) ByteIterator {
	return MakeInvertingByteSliceIter(ByteUnroll(items))
}
