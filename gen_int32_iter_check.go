// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
package iter

import "github.com/pkg/errors"

type Int32Checker interface {
	// It is suggested to return EndOfInt32Iterator to stop iteration.
	Check(int32) (bool, error)
}

type Int32Check func(int32) (bool, error)

func (ch Int32Check) Check(item int32) (bool, error) { return ch(item) }

var (
	AlwaysInt32CheckTrue  = Int32Check(func(item int32) (bool, error) { return true, nil })
	AlwaysInt32CheckFalse = Int32Check(func(item int32) (bool, error) { return false, nil })
)

func NotInt32(checker Int32Checker) Int32Checker {
	if checker == nil {
		return AlwaysInt32CheckTrue
	}
	return Int32Check(func(item int32) (bool, error) {
		yes, err := checker.Check(item)
		if err != nil {
			// No error wrapping since an error context is missing.
			return false, err
		}

		return !yes, nil
	})
}

type andInt32 struct {
	lhs, rhs Int32Checker
}

func (a andInt32) Check(item int32) (bool, error) {
	isLHSPassed, err := a.lhs.Check(item)
	if err != nil {
		return false, wrapIfNotEndOfInt32Iterator(err, "lhs check")
	}
	if !isLHSPassed {
		return false, nil
	}

	isRHSPassed, err := a.rhs.Check(item)
	if err != nil {
		return false, wrapIfNotEndOfInt32Iterator(err, "rhs check")
	}
	return isRHSPassed, nil
}

func AllInt32(checkers ...Int32Checker) Int32Checker {
	var all Int32Checker = AlwaysInt32CheckTrue
	for i := len(checkers) - 1; i >= 0; i-- {
		if checkers[i] == nil {
			continue
		}
		all = andInt32{checkers[i], all}
	}
	return all
}

type orInt32 struct {
	lhs, rhs Int32Checker
}

func (o orInt32) Check(item int32) (bool, error) {
	isLHSPassed, err := o.lhs.Check(item)
	if err != nil {
		return false, wrapIfNotEndOfInt32Iterator(err, "lhs check")
	}
	if isLHSPassed {
		return true, nil
	}

	isRHSPassed, err := o.rhs.Check(item)
	if err != nil {
		return false, wrapIfNotEndOfInt32Iterator(err, "rhs check")
	}
	return isRHSPassed, nil
}

func AnyInt32(checkers ...Int32Checker) Int32Checker {
	var any Int32Checker = AlwaysInt32CheckFalse
	for i := len(checkers) - 1; i >= 0; i-- {
		if checkers[i] == nil {
			continue
		}
		any = orInt32{checkers[i], any}
	}
	return any
}

type FilteringInt32Iterator struct {
	preparedInt32Item
	filter Int32Checker
}

func (it *FilteringInt32Iterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	for it.preparedInt32Item.HasNext() {
		next := it.base.Next()
		isFilterPassed, err := it.filter.Check(next)
		if err != nil {
			if !isEndOfInt32Iterator(err) {
				err = errors.Wrap(err, "filtering iterator: check")
			}
			it.err = err
			return false
		}

		if !isFilterPassed {
			continue
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// Int32Filtering sets filter while iterating over items.
// If filters is empty, so all items will return.
func Int32Filtering(items Int32Iterator, filters ...Int32Checker) Int32Iterator {
	if items == nil {
		return EmptyInt32Iterator
	}
	return &FilteringInt32Iterator{preparedInt32Item{base: items}, AllInt32(filters...)}
}

func Int32Filter(items Int32Iterator, checker ...Int32Checker) error {
	// no error wrapping since no additional context for the error; just return it.
	return Int32Discard(Int32Filtering(items, checker...))
}

type Int32EnumChecker interface {
	// It is suggested to return EndOfInt32Iterator to stop iteration.
	Check(int, int32) (bool, error)
}

type Int32EnumCheck func(int, int32) (bool, error)

func (ch Int32EnumCheck) Check(n int, item int32) (bool, error) { return ch(n, item) }

type enumFromInt32Checker struct {
	Int32Checker
}

func (ch enumFromInt32Checker) Check(_ int, item int32) (bool, error) {
	return ch.Int32Checker.Check(item)
}

func EnumFromInt32Checker(checker Int32Checker) Int32EnumChecker {
	return &enumFromInt32Checker{checker}
}

var (
	AlwaysInt32EnumCheckTrue  = EnumFromInt32Checker(AlwaysInt32CheckTrue)
	AlwaysInt32EnumCheckFalse = EnumFromInt32Checker(AlwaysInt32CheckFalse)
)

func EnumNotInt32(checker Int32EnumChecker) Int32EnumChecker {
	if checker == nil {
		return AlwaysInt32EnumCheckTrue
	}
	return Int32EnumCheck(func(n int, item int32) (bool, error) {
		yes, err := checker.Check(n, item)
		if err != nil {
			// No error wrapping since an error context is missing.
			return false, err
		}

		return !yes, nil
	})
}

type enumAndInt32 struct {
	lhs, rhs Int32EnumChecker
}

func (a enumAndInt32) Check(n int, item int32) (bool, error) {
	isLHSPassed, err := a.lhs.Check(n, item)
	if err != nil {
		return false, wrapIfNotEndOfInt32Iterator(err, "lhs check")
	}
	if !isLHSPassed {
		return false, nil
	}

	isRHSPassed, err := a.rhs.Check(n, item)
	if err != nil {
		return false, wrapIfNotEndOfInt32Iterator(err, "rhs check")
	}
	return isRHSPassed, nil
}

func EnumAllInt32(checkers ...Int32EnumChecker) Int32EnumChecker {
	var all Int32EnumChecker = AlwaysInt32EnumCheckTrue
	for i := len(checkers) - 1; i >= 0; i-- {
		if checkers[i] == nil {
			continue
		}
		all = enumAndInt32{checkers[i], all}
	}
	return all
}

type enumOrInt32 struct {
	lhs, rhs Int32EnumChecker
}

func (o enumOrInt32) Check(n int, item int32) (bool, error) {
	isLHSPassed, err := o.lhs.Check(n, item)
	if err != nil {
		return false, wrapIfNotEndOfInt32Iterator(err, "lhs check")
	}
	if isLHSPassed {
		return true, nil
	}

	isRHSPassed, err := o.rhs.Check(n, item)
	if err != nil {
		return false, wrapIfNotEndOfInt32Iterator(err, "rhs check")
	}
	return isRHSPassed, nil
}

func EnumAnyInt32(checkers ...Int32EnumChecker) Int32EnumChecker {
	var any Int32EnumChecker = AlwaysInt32EnumCheckFalse
	for i := len(checkers) - 1; i >= 0; i-- {
		if checkers[i] == nil {
			continue
		}
		any = enumOrInt32{checkers[i], any}
	}
	return any
}

type EnumFilteringInt32Iterator struct {
	preparedInt32Item
	filter Int32EnumChecker
	count  int
}

func (it *EnumFilteringInt32Iterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	for it.preparedInt32Item.HasNext() {
		next := it.base.Next()
		isFilterPassed, err := it.filter.Check(it.count, next)
		if err != nil {
			if !isEndOfInt32Iterator(err) {
				err = errors.Wrap(err, "enum filtering iterator: check")
			}
			it.err = err
			return false
		}
		it.count++

		if !isFilterPassed {
			continue
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// Int32EnumFiltering sets filter while iterating over items and their serial numbers.
// If filters is empty, so all items will return.
func Int32EnumFiltering(items Int32Iterator, filters ...Int32EnumChecker) Int32Iterator {
	if items == nil {
		return EmptyInt32Iterator
	}
	return &EnumFilteringInt32Iterator{preparedInt32Item{base: items}, EnumAllInt32(filters...), 0}
}

type DoingUntilInt32Iterator struct {
	preparedInt32Item
	until Int32Checker
}

func (it *DoingUntilInt32Iterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	for it.preparedInt32Item.HasNext() {
		next := it.base.Next()
		isUntilPassed, err := it.until.Check(next)
		if err != nil {
			if !isEndOfInt32Iterator(err) {
				err = errors.Wrap(err, "doing until iterator: until")
			}
			it.err = err
			return false
		}

		if isUntilPassed {
			it.err = EndOfInt32Iterator
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// Int32DoingUntil sets until checker while iterating over items.
// If untilList is empty, so all items returned as is.
func Int32DoingUntil(items Int32Iterator, untilList ...Int32Checker) Int32Iterator {
	if items == nil {
		return EmptyInt32Iterator
	}
	return &DoingUntilInt32Iterator{preparedInt32Item{base: items}, AllInt32(untilList...)}
}

func Int32DoUntil(items Int32Iterator, untilList ...Int32Checker) error {
	// no error wrapping since no additional context for the error; just return it.
	return Int32Discard(Int32DoingUntil(items, untilList...))
}

// Int32GettingBatch returns the next batch from items.
func Int32GettingBatch(items Int32Iterator, batchSize int) Int32Iterator {
	if items == nil {
		return EmptyInt32Iterator
	}
	if batchSize == 0 {
		return items
	}

	size := 0
	return Int32DoingUntil(items, Int32Check(func(item int32) (bool, error) {
		size++
		return size >= batchSize, nil
	}))
}
