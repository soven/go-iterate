// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
package iter

import "github.com/pkg/errors"

type ByteChecker interface {
	// It is suggested to return EndOfByteIterator to stop iteration.
	Check(byte) (bool, error)
}

type ByteCheck func(byte) (bool, error)

func (ch ByteCheck) Check(item byte) (bool, error) { return ch(item) }

var (
	AlwaysByteCheckTrue  = ByteCheck(func(item byte) (bool, error) { return true, nil })
	AlwaysByteCheckFalse = ByteCheck(func(item byte) (bool, error) { return false, nil })
)

func NotByte(checker ByteChecker) ByteChecker {
	if checker == nil {
		return AlwaysByteCheckTrue
	}
	return ByteCheck(func(item byte) (bool, error) {
		yes, err := checker.Check(item)
		if err != nil {
			// No error wrapping since an error context is missing.
			return false, err
		}

		return !yes, nil
	})
}

type andByte struct {
	lhs, rhs ByteChecker
}

func (a andByte) Check(item byte) (bool, error) {
	isLHSPassed, err := a.lhs.Check(item)
	if err != nil {
		return false, wrapIfNotEndOfByteIterator(err, "lhs check")
	}
	if !isLHSPassed {
		return false, nil
	}

	isRHSPassed, err := a.rhs.Check(item)
	if err != nil {
		return false, wrapIfNotEndOfByteIterator(err, "rhs check")
	}
	return isRHSPassed, nil
}

func AllByte(checkers ...ByteChecker) ByteChecker {
	var all ByteChecker = AlwaysByteCheckTrue
	for i := len(checkers) - 1; i >= 0; i-- {
		if checkers[i] == nil {
			continue
		}
		all = andByte{checkers[i], all}
	}
	return all
}

type orByte struct {
	lhs, rhs ByteChecker
}

func (o orByte) Check(item byte) (bool, error) {
	isLHSPassed, err := o.lhs.Check(item)
	if err != nil {
		return false, wrapIfNotEndOfByteIterator(err, "lhs check")
	}
	if isLHSPassed {
		return true, nil
	}

	isRHSPassed, err := o.rhs.Check(item)
	if err != nil {
		return false, wrapIfNotEndOfByteIterator(err, "rhs check")
	}
	return isRHSPassed, nil
}

func AnyByte(checkers ...ByteChecker) ByteChecker {
	var any ByteChecker = AlwaysByteCheckFalse
	for i := len(checkers) - 1; i >= 0; i-- {
		if checkers[i] == nil {
			continue
		}
		any = orByte{checkers[i], any}
	}
	return any
}

type FilteringByteIterator struct {
	preparedByteItem
	filter ByteChecker
}

func (it *FilteringByteIterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	for it.preparedByteItem.HasNext() {
		next := it.base.Next()
		isFilterPassed, err := it.filter.Check(next)
		if err != nil {
			if !isEndOfByteIterator(err) {
				err = errors.Wrap(err, "filtering iterator: check")
			}
			it.err = err
			return false
		}

		if !isFilterPassed {
			continue
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// ByteFiltering sets filter while iterating over items.
// If filters is empty, so all items will return.
func ByteFiltering(items ByteIterator, filters ...ByteChecker) ByteIterator {
	if items == nil {
		return EmptyByteIterator
	}
	return &FilteringByteIterator{preparedByteItem{base: items}, AllByte(filters...)}
}

func ByteFilter(items ByteIterator, checker ...ByteChecker) error {
	// no error wrapping since no additional context for the error; just return it.
	return ByteDiscard(ByteFiltering(items, checker...))
}

type ByteEnumChecker interface {
	// It is suggested to return EndOfByteIterator to stop iteration.
	Check(int, byte) (bool, error)
}

type ByteEnumCheck func(int, byte) (bool, error)

func (ch ByteEnumCheck) Check(n int, item byte) (bool, error) { return ch(n, item) }

type enumFromByteChecker struct {
	ByteChecker
}

func (ch enumFromByteChecker) Check(_ int, item byte) (bool, error) {
	return ch.ByteChecker.Check(item)
}

func EnumFromByteChecker(checker ByteChecker) ByteEnumChecker {
	return &enumFromByteChecker{checker}
}

var (
	AlwaysByteEnumCheckTrue  = EnumFromByteChecker(AlwaysByteCheckTrue)
	AlwaysByteEnumCheckFalse = EnumFromByteChecker(AlwaysByteCheckFalse)
)

func EnumNotByte(checker ByteEnumChecker) ByteEnumChecker {
	if checker == nil {
		return AlwaysByteEnumCheckTrue
	}
	return ByteEnumCheck(func(n int, item byte) (bool, error) {
		yes, err := checker.Check(n, item)
		if err != nil {
			// No error wrapping since an error context is missing.
			return false, err
		}

		return !yes, nil
	})
}

type enumAndByte struct {
	lhs, rhs ByteEnumChecker
}

func (a enumAndByte) Check(n int, item byte) (bool, error) {
	isLHSPassed, err := a.lhs.Check(n, item)
	if err != nil {
		return false, wrapIfNotEndOfByteIterator(err, "lhs check")
	}
	if !isLHSPassed {
		return false, nil
	}

	isRHSPassed, err := a.rhs.Check(n, item)
	if err != nil {
		return false, wrapIfNotEndOfByteIterator(err, "rhs check")
	}
	return isRHSPassed, nil
}

func EnumAllByte(checkers ...ByteEnumChecker) ByteEnumChecker {
	var all ByteEnumChecker = AlwaysByteEnumCheckTrue
	for i := len(checkers) - 1; i >= 0; i-- {
		if checkers[i] == nil {
			continue
		}
		all = enumAndByte{checkers[i], all}
	}
	return all
}

type enumOrByte struct {
	lhs, rhs ByteEnumChecker
}

func (o enumOrByte) Check(n int, item byte) (bool, error) {
	isLHSPassed, err := o.lhs.Check(n, item)
	if err != nil {
		return false, wrapIfNotEndOfByteIterator(err, "lhs check")
	}
	if isLHSPassed {
		return true, nil
	}

	isRHSPassed, err := o.rhs.Check(n, item)
	if err != nil {
		return false, wrapIfNotEndOfByteIterator(err, "rhs check")
	}
	return isRHSPassed, nil
}

func EnumAnyByte(checkers ...ByteEnumChecker) ByteEnumChecker {
	var any ByteEnumChecker = AlwaysByteEnumCheckFalse
	for i := len(checkers) - 1; i >= 0; i-- {
		if checkers[i] == nil {
			continue
		}
		any = enumOrByte{checkers[i], any}
	}
	return any
}

type EnumFilteringByteIterator struct {
	preparedByteItem
	filter ByteEnumChecker
	count  int
}

func (it *EnumFilteringByteIterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	for it.preparedByteItem.HasNext() {
		next := it.base.Next()
		isFilterPassed, err := it.filter.Check(it.count, next)
		if err != nil {
			if !isEndOfByteIterator(err) {
				err = errors.Wrap(err, "enum filtering iterator: check")
			}
			it.err = err
			return false
		}
		it.count++

		if !isFilterPassed {
			continue
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// ByteEnumFiltering sets filter while iterating over items and their serial numbers.
// If filters is empty, so all items will return.
func ByteEnumFiltering(items ByteIterator, filters ...ByteEnumChecker) ByteIterator {
	if items == nil {
		return EmptyByteIterator
	}
	return &EnumFilteringByteIterator{preparedByteItem{base: items}, EnumAllByte(filters...), 0}
}

type DoingUntilByteIterator struct {
	preparedByteItem
	until ByteChecker
}

func (it *DoingUntilByteIterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	for it.preparedByteItem.HasNext() {
		next := it.base.Next()
		isUntilPassed, err := it.until.Check(next)
		if err != nil {
			if !isEndOfByteIterator(err) {
				err = errors.Wrap(err, "doing until iterator: until")
			}
			it.err = err
			return false
		}

		if isUntilPassed {
			it.err = EndOfByteIterator
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// ByteDoingUntil sets until checker while iterating over items.
// If untilList is empty, so all items returned as is.
func ByteDoingUntil(items ByteIterator, untilList ...ByteChecker) ByteIterator {
	if items == nil {
		return EmptyByteIterator
	}
	return &DoingUntilByteIterator{preparedByteItem{base: items}, AllByte(untilList...)}
}

func ByteDoUntil(items ByteIterator, untilList ...ByteChecker) error {
	// no error wrapping since no additional context for the error; just return it.
	return ByteDiscard(ByteDoingUntil(items, untilList...))
}

// ByteGettingBatch returns the next batch from items.
func ByteGettingBatch(items ByteIterator, batchSize int) ByteIterator {
	if items == nil {
		return EmptyByteIterator
	}
	if batchSize == 0 {
		return items
	}

	size := 0
	return ByteDoingUntil(items, ByteCheck(func(item byte) (bool, error) {
		size++
		return size >= batchSize, nil
	}))
}
