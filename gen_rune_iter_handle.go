// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
package iter

import "github.com/pkg/errors"

type RuneHandler interface {
	// It is suggested to return EndOfRuneIterator to stop iteration.
	Handle(rune) error
}

type RuneHandle func(rune) error

func (h RuneHandle) Handle(item rune) error { return h(item) }

var RuneDoNothing = RuneHandle(func(_ rune) error { return nil })

type doubleRuneHandler struct {
	lhs, rhs RuneHandler
}

func (h doubleRuneHandler) Handle(item rune) error {
	err := h.lhs.Handle(item)
	if err != nil {
		return errors.Wrap(err, "handle lhs")
	}
	err = h.rhs.Handle(item)
	if err != nil {
		return errors.Wrap(err, "handle rhs")
	}
	return nil
}

func RuneHandlerSeries(handlers ...RuneHandler) RuneHandler {
	var series RuneHandler = RuneDoNothing
	for i := len(handlers) - 1; i >= 0; i-- {
		if handlers[i] == nil {
			continue
		}
		series = doubleRuneHandler{lhs: handlers[i], rhs: series}
	}
	return series
}

type HandlingRuneIterator struct {
	preparedRuneItem
	handler RuneHandler
}

func (it *HandlingRuneIterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	if it.preparedRuneItem.HasNext() {
		next := it.base.Next()
		err := it.handler.Handle(next)
		if err != nil {
			if !isEndOfRuneIterator(err) {
				err = errors.Wrap(err, "handling iterator: check")
			}
			it.err = err
			return false
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// RuneHandling sets handler while iterating over items.
// If handlers is empty, so it will do nothing.
func RuneHandling(items RuneIterator, handlers ...RuneHandler) RuneIterator {
	if items == nil {
		return EmptyRuneIterator
	}
	return &HandlingRuneIterator{preparedRuneItem{base: items}, RuneHandlerSeries(handlers...)}
}

func RuneRange(items RuneIterator, handler ...RuneHandler) error {
	// no error wrapping since no additional context for the error; just return it.
	return RuneDiscard(RuneHandling(items, handler...))
}

type RuneEnumHandler interface {
	// It is suggested to return EndOfRuneIterator to stop iteration.
	Handle(int, rune) error
}

type RuneEnumHandle func(int, rune) error

func (h RuneEnumHandle) Handle(n int, item rune) error { return h(n, item) }

var RuneDoEnumNothing = RuneEnumHandle(func(_ int, _ rune) error { return nil })

type doubleRuneEnumHandler struct {
	lhs, rhs RuneEnumHandler
}

func (h doubleRuneEnumHandler) Handle(n int, item rune) error {
	err := h.lhs.Handle(n, item)
	if err != nil {
		return errors.Wrap(err, "handle lhs")
	}
	err = h.rhs.Handle(n, item)
	if err != nil {
		return errors.Wrap(err, "handle rhs")
	}
	return nil
}

func RuneEnumHandlerSeries(handlers ...RuneEnumHandler) RuneEnumHandler {
	var series RuneEnumHandler = RuneDoEnumNothing
	for i := len(handlers) - 1; i >= 0; i-- {
		if handlers[i] == nil {
			continue
		}
		series = doubleRuneEnumHandler{lhs: handlers[i], rhs: series}
	}
	return series
}

type EnumHandlingRuneIterator struct {
	preparedRuneItem
	handler RuneEnumHandler
	count   int
}

func (it *EnumHandlingRuneIterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	if it.preparedRuneItem.HasNext() {
		next := it.base.Next()
		err := it.handler.Handle(it.count, next)
		if err != nil {
			if !isEndOfRuneIterator(err) {
				err = errors.Wrap(err, "enum handling iterator: check")
			}
			it.err = err
			return false
		}
		it.count++

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// RuneEnumHandling sets handler while iterating over items with their serial number.
// If handlers is empty, so it will do nothing.
func RuneEnumHandling(items RuneIterator, handlers ...RuneEnumHandler) RuneIterator {
	if items == nil {
		return EmptyRuneIterator
	}
	return &EnumHandlingRuneIterator{
		preparedRuneItem{base: items}, RuneEnumHandlerSeries(handlers...), 0}
}

func RuneEnumerate(items RuneIterator, handler ...RuneEnumHandler) error {
	// no error wrapping since no additional context for the error; just return it.
	return RuneDiscard(RuneEnumHandling(items, handler...))
}
