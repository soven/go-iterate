// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
package iter

import "github.com/pkg/errors"

type UintChecker interface {
	// It is suggested to return EndOfUintIterator to stop iteration.
	Check(uint) (bool, error)
}

type UintCheck func(uint) (bool, error)

func (ch UintCheck) Check(item uint) (bool, error) { return ch(item) }

var (
	AlwaysUintCheckTrue  = UintCheck(func(item uint) (bool, error) { return true, nil })
	AlwaysUintCheckFalse = UintCheck(func(item uint) (bool, error) { return false, nil })
)

func NotUint(checker UintChecker) UintChecker {
	if checker == nil {
		return AlwaysUintCheckTrue
	}
	return UintCheck(func(item uint) (bool, error) {
		yes, err := checker.Check(item)
		if err != nil {
			// No error wrapping since an error context is missing.
			return false, err
		}

		return !yes, nil
	})
}

type andUint struct {
	lhs, rhs UintChecker
}

func (a andUint) Check(item uint) (bool, error) {
	isLHSPassed, err := a.lhs.Check(item)
	if err != nil {
		return false, wrapIfNotEndOfUintIterator(err, "lhs check")
	}
	if !isLHSPassed {
		return false, nil
	}

	isRHSPassed, err := a.rhs.Check(item)
	if err != nil {
		return false, wrapIfNotEndOfUintIterator(err, "rhs check")
	}
	return isRHSPassed, nil
}

func AllUint(checkers ...UintChecker) UintChecker {
	var all UintChecker = AlwaysUintCheckTrue
	for i := len(checkers) - 1; i >= 0; i-- {
		if checkers[i] == nil {
			continue
		}
		all = andUint{checkers[i], all}
	}
	return all
}

type orUint struct {
	lhs, rhs UintChecker
}

func (o orUint) Check(item uint) (bool, error) {
	isLHSPassed, err := o.lhs.Check(item)
	if err != nil {
		return false, wrapIfNotEndOfUintIterator(err, "lhs check")
	}
	if isLHSPassed {
		return true, nil
	}

	isRHSPassed, err := o.rhs.Check(item)
	if err != nil {
		return false, wrapIfNotEndOfUintIterator(err, "rhs check")
	}
	return isRHSPassed, nil
}

func AnyUint(checkers ...UintChecker) UintChecker {
	var any UintChecker = AlwaysUintCheckFalse
	for i := len(checkers) - 1; i >= 0; i-- {
		if checkers[i] == nil {
			continue
		}
		any = orUint{checkers[i], any}
	}
	return any
}

type FilteringUintIterator struct {
	preparedUintItem
	filter UintChecker
}

func (it *FilteringUintIterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	for it.preparedUintItem.HasNext() {
		next := it.base.Next()
		isFilterPassed, err := it.filter.Check(next)
		if err != nil {
			if !isEndOfUintIterator(err) {
				err = errors.Wrap(err, "filtering iterator: check")
			}
			it.err = err
			return false
		}

		if !isFilterPassed {
			continue
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// UintFiltering sets filter while iterating over items.
// If filters is empty, so all items will return.
func UintFiltering(items UintIterator, filters ...UintChecker) UintIterator {
	if items == nil {
		return EmptyUintIterator
	}
	return &FilteringUintIterator{preparedUintItem{base: items}, AllUint(filters...)}
}

func UintFilter(items UintIterator, checker ...UintChecker) error {
	// no error wrapping since no additional context for the error; just return it.
	return UintDiscard(UintFiltering(items, checker...))
}

type UintEnumChecker interface {
	// It is suggested to return EndOfUintIterator to stop iteration.
	Check(int, uint) (bool, error)
}

type UintEnumCheck func(int, uint) (bool, error)

func (ch UintEnumCheck) Check(n int, item uint) (bool, error) { return ch(n, item) }

type enumFromUintChecker struct {
	UintChecker
}

func (ch enumFromUintChecker) Check(_ int, item uint) (bool, error) {
	return ch.UintChecker.Check(item)
}

func EnumFromUintChecker(checker UintChecker) UintEnumChecker {
	return &enumFromUintChecker{checker}
}

var (
	AlwaysUintEnumCheckTrue  = EnumFromUintChecker(AlwaysUintCheckTrue)
	AlwaysUintEnumCheckFalse = EnumFromUintChecker(AlwaysUintCheckFalse)
)

func EnumNotUint(checker UintEnumChecker) UintEnumChecker {
	if checker == nil {
		return AlwaysUintEnumCheckTrue
	}
	return UintEnumCheck(func(n int, item uint) (bool, error) {
		yes, err := checker.Check(n, item)
		if err != nil {
			// No error wrapping since an error context is missing.
			return false, err
		}

		return !yes, nil
	})
}

type enumAndUint struct {
	lhs, rhs UintEnumChecker
}

func (a enumAndUint) Check(n int, item uint) (bool, error) {
	isLHSPassed, err := a.lhs.Check(n, item)
	if err != nil {
		return false, wrapIfNotEndOfUintIterator(err, "lhs check")
	}
	if !isLHSPassed {
		return false, nil
	}

	isRHSPassed, err := a.rhs.Check(n, item)
	if err != nil {
		return false, wrapIfNotEndOfUintIterator(err, "rhs check")
	}
	return isRHSPassed, nil
}

func EnumAllUint(checkers ...UintEnumChecker) UintEnumChecker {
	var all UintEnumChecker = AlwaysUintEnumCheckTrue
	for i := len(checkers) - 1; i >= 0; i-- {
		if checkers[i] == nil {
			continue
		}
		all = enumAndUint{checkers[i], all}
	}
	return all
}

type enumOrUint struct {
	lhs, rhs UintEnumChecker
}

func (o enumOrUint) Check(n int, item uint) (bool, error) {
	isLHSPassed, err := o.lhs.Check(n, item)
	if err != nil {
		return false, wrapIfNotEndOfUintIterator(err, "lhs check")
	}
	if isLHSPassed {
		return true, nil
	}

	isRHSPassed, err := o.rhs.Check(n, item)
	if err != nil {
		return false, wrapIfNotEndOfUintIterator(err, "rhs check")
	}
	return isRHSPassed, nil
}

func EnumAnyUint(checkers ...UintEnumChecker) UintEnumChecker {
	var any UintEnumChecker = AlwaysUintEnumCheckFalse
	for i := len(checkers) - 1; i >= 0; i-- {
		if checkers[i] == nil {
			continue
		}
		any = enumOrUint{checkers[i], any}
	}
	return any
}

type EnumFilteringUintIterator struct {
	preparedUintItem
	filter UintEnumChecker
	count  int
}

func (it *EnumFilteringUintIterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	for it.preparedUintItem.HasNext() {
		next := it.base.Next()
		isFilterPassed, err := it.filter.Check(it.count, next)
		if err != nil {
			if !isEndOfUintIterator(err) {
				err = errors.Wrap(err, "enum filtering iterator: check")
			}
			it.err = err
			return false
		}
		it.count++

		if !isFilterPassed {
			continue
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// UintEnumFiltering sets filter while iterating over items and their serial numbers.
// If filters is empty, so all items will return.
func UintEnumFiltering(items UintIterator, filters ...UintEnumChecker) UintIterator {
	if items == nil {
		return EmptyUintIterator
	}
	return &EnumFilteringUintIterator{preparedUintItem{base: items}, EnumAllUint(filters...), 0}
}

type DoingUntilUintIterator struct {
	preparedUintItem
	until UintChecker
}

func (it *DoingUntilUintIterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	for it.preparedUintItem.HasNext() {
		next := it.base.Next()
		isUntilPassed, err := it.until.Check(next)
		if err != nil {
			if !isEndOfUintIterator(err) {
				err = errors.Wrap(err, "doing until iterator: until")
			}
			it.err = err
			return false
		}

		if isUntilPassed {
			it.err = EndOfUintIterator
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// UintDoingUntil sets until checker while iterating over items.
// If untilList is empty, so all items returned as is.
func UintDoingUntil(items UintIterator, untilList ...UintChecker) UintIterator {
	if items == nil {
		return EmptyUintIterator
	}
	return &DoingUntilUintIterator{preparedUintItem{base: items}, AllUint(untilList...)}
}

func UintDoUntil(items UintIterator, untilList ...UintChecker) error {
	// no error wrapping since no additional context for the error; just return it.
	return UintDiscard(UintDoingUntil(items, untilList...))
}

// UintGettingBatch returns the next batch from items.
func UintGettingBatch(items UintIterator, batchSize int) UintIterator {
	if items == nil {
		return EmptyUintIterator
	}
	if batchSize == 0 {
		return items
	}

	size := 0
	return UintDoingUntil(items, UintCheck(func(item uint) (bool, error) {
		size++
		return size >= batchSize, nil
	}))
}
