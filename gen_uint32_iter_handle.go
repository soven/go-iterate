// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
package iter

import "github.com/pkg/errors"

type Uint32Handler interface {
	// It is suggested to return EndOfUint32Iterator to stop iteration.
	Handle(uint32) error
}

type Uint32Handle func(uint32) error

func (h Uint32Handle) Handle(item uint32) error { return h(item) }

var Uint32DoNothing = Uint32Handle(func(_ uint32) error { return nil })

type doubleUint32Handler struct {
	lhs, rhs Uint32Handler
}

func (h doubleUint32Handler) Handle(item uint32) error {
	err := h.lhs.Handle(item)
	if err != nil {
		return errors.Wrap(err, "handle lhs")
	}
	err = h.rhs.Handle(item)
	if err != nil {
		return errors.Wrap(err, "handle rhs")
	}
	return nil
}

func Uint32HandlerSeries(handlers ...Uint32Handler) Uint32Handler {
	var series Uint32Handler = Uint32DoNothing
	for i := len(handlers) - 1; i >= 0; i-- {
		if handlers[i] == nil {
			continue
		}
		series = doubleUint32Handler{lhs: handlers[i], rhs: series}
	}
	return series
}

type HandlingUint32Iterator struct {
	preparedUint32Item
	handler Uint32Handler
}

func (it *HandlingUint32Iterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	if it.preparedUint32Item.HasNext() {
		next := it.base.Next()
		err := it.handler.Handle(next)
		if err != nil {
			if !isEndOfUint32Iterator(err) {
				err = errors.Wrap(err, "handling iterator: check")
			}
			it.err = err
			return false
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// Uint32Handling sets handler while iterating over items.
// If handlers is empty, so it will do nothing.
func Uint32Handling(items Uint32Iterator, handlers ...Uint32Handler) Uint32Iterator {
	if items == nil {
		return EmptyUint32Iterator
	}
	return &HandlingUint32Iterator{preparedUint32Item{base: items}, Uint32HandlerSeries(handlers...)}
}

func Uint32Range(items Uint32Iterator, handler ...Uint32Handler) error {
	// no error wrapping since no additional context for the error; just return it.
	return Uint32Discard(Uint32Handling(items, handler...))
}

type Uint32EnumHandler interface {
	// It is suggested to return EndOfUint32Iterator to stop iteration.
	Handle(int, uint32) error
}

type Uint32EnumHandle func(int, uint32) error

func (h Uint32EnumHandle) Handle(n int, item uint32) error { return h(n, item) }

var Uint32DoEnumNothing = Uint32EnumHandle(func(_ int, _ uint32) error { return nil })

type doubleUint32EnumHandler struct {
	lhs, rhs Uint32EnumHandler
}

func (h doubleUint32EnumHandler) Handle(n int, item uint32) error {
	err := h.lhs.Handle(n, item)
	if err != nil {
		return errors.Wrap(err, "handle lhs")
	}
	err = h.rhs.Handle(n, item)
	if err != nil {
		return errors.Wrap(err, "handle rhs")
	}
	return nil
}

func Uint32EnumHandlerSeries(handlers ...Uint32EnumHandler) Uint32EnumHandler {
	var series Uint32EnumHandler = Uint32DoEnumNothing
	for i := len(handlers) - 1; i >= 0; i-- {
		if handlers[i] == nil {
			continue
		}
		series = doubleUint32EnumHandler{lhs: handlers[i], rhs: series}
	}
	return series
}

type EnumHandlingUint32Iterator struct {
	preparedUint32Item
	handler Uint32EnumHandler
	count   int
}

func (it *EnumHandlingUint32Iterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	if it.preparedUint32Item.HasNext() {
		next := it.base.Next()
		err := it.handler.Handle(it.count, next)
		if err != nil {
			if !isEndOfUint32Iterator(err) {
				err = errors.Wrap(err, "enum handling iterator: check")
			}
			it.err = err
			return false
		}
		it.count++

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// Uint32EnumHandling sets handler while iterating over items with their serial number.
// If handlers is empty, so it will do nothing.
func Uint32EnumHandling(items Uint32Iterator, handlers ...Uint32EnumHandler) Uint32Iterator {
	if items == nil {
		return EmptyUint32Iterator
	}
	return &EnumHandlingUint32Iterator{
		preparedUint32Item{base: items}, Uint32EnumHandlerSeries(handlers...), 0}
}

func Uint32Enumerate(items Uint32Iterator, handler ...Uint32EnumHandler) error {
	// no error wrapping since no additional context for the error; just return it.
	return Uint32Discard(Uint32EnumHandling(items, handler...))
}
