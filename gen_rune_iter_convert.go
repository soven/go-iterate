package iter

// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
import "github.com/pkg/errors"

type RuneConverter interface {
	// It is suggested to return EndOfRuneIterator to stop iteration.
	Convert(rune) (rune, error)
}

type RuneConvert func(rune) (rune, error)

func (c RuneConvert) Convert(item rune) (rune, error) { return c(item) }

var NoRuneConvert = RuneConvert(func(item rune) (rune, error) { return item, nil })

type doubleRuneConverter struct {
	lhs, rhs RuneConverter
}

func (c doubleRuneConverter) Convert(item rune) (rune, error) {
	item, err := c.lhs.Convert(item)
	if err != nil {
		return 0, errors.Wrap(err, "convert lhs")
	}
	item, err = c.rhs.Convert(item)
	if err != nil {
		return 0, errors.Wrap(err, "convert rhs")
	}
	return item, nil
}

func RuneConverterSeries(converters ...RuneConverter) RuneConverter {
	var series RuneConverter = NoRuneConvert
	for i := len(converters) - 1; i >= 0; i-- {
		if converters[i] == nil {
			continue
		}
		series = doubleRuneConverter{lhs: converters[i], rhs: series}
	}

	return series
}

type ConvertingRuneIterator struct {
	preparedRuneItem
	converter RuneConverter
}

func (it *ConvertingRuneIterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	if it.preparedRuneItem.HasNext() {
		next := it.base.Next()
		next, err := it.converter.Convert(next)
		if err != nil {
			if !isEndOfRuneIterator(err) {
				err = errors.Wrap(err, "filtering iterator: check")
			}
			it.err = err
			return false
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// RuneConverting sets converter while iterating over items.
// If converters is empty, so all items will not be affected.
func RuneConverting(items RuneIterator, converters ...RuneConverter) RuneIterator {
	if items == nil {
		return EmptyRuneIterator
	}
	return &ConvertingRuneIterator{preparedRuneItem{base: items}, RuneConverterSeries(converters...)}
}

func RuneMap(items RuneIterator, converter ...RuneConverter) error {
	// no error wrapping since no additional context for the error; just return it.
	return RuneDiscard(RuneConverting(items, converter...))
}
