// Code generated by github.com/soven/go-iterate. DO NOT EDIT.
package iter

import "github.com/pkg/errors"

type StringChecker interface {
	// It is suggested to return EndOfStringIterator to stop iteration.
	Check(string) (bool, error)
}

type StringCheck func(string) (bool, error)

func (ch StringCheck) Check(item string) (bool, error) { return ch(item) }

var (
	AlwaysStringCheckTrue  = StringCheck(func(item string) (bool, error) { return true, nil })
	AlwaysStringCheckFalse = StringCheck(func(item string) (bool, error) { return false, nil })
)

func NotString(checker StringChecker) StringChecker {
	if checker == nil {
		return AlwaysStringCheckTrue
	}
	return StringCheck(func(item string) (bool, error) {
		yes, err := checker.Check(item)
		if err != nil {
			// No error wrapping since an error context is missing.
			return false, err
		}

		return !yes, nil
	})
}

type andString struct {
	lhs, rhs StringChecker
}

func (a andString) Check(item string) (bool, error) {
	isLHSPassed, err := a.lhs.Check(item)
	if err != nil {
		return false, wrapIfNotEndOfStringIterator(err, "lhs check")
	}
	if !isLHSPassed {
		return false, nil
	}

	isRHSPassed, err := a.rhs.Check(item)
	if err != nil {
		return false, wrapIfNotEndOfStringIterator(err, "rhs check")
	}
	return isRHSPassed, nil
}

func AllString(checkers ...StringChecker) StringChecker {
	var all StringChecker = AlwaysStringCheckTrue
	for i := len(checkers) - 1; i >= 0; i-- {
		if checkers[i] == nil {
			continue
		}
		all = andString{checkers[i], all}
	}
	return all
}

type orString struct {
	lhs, rhs StringChecker
}

func (o orString) Check(item string) (bool, error) {
	isLHSPassed, err := o.lhs.Check(item)
	if err != nil {
		return false, wrapIfNotEndOfStringIterator(err, "lhs check")
	}
	if isLHSPassed {
		return true, nil
	}

	isRHSPassed, err := o.rhs.Check(item)
	if err != nil {
		return false, wrapIfNotEndOfStringIterator(err, "rhs check")
	}
	return isRHSPassed, nil
}

func AnyString(checkers ...StringChecker) StringChecker {
	var any StringChecker = AlwaysStringCheckFalse
	for i := len(checkers) - 1; i >= 0; i-- {
		if checkers[i] == nil {
			continue
		}
		any = orString{checkers[i], any}
	}
	return any
}

type FilteringStringIterator struct {
	preparedStringItem
	filter StringChecker
}

func (it *FilteringStringIterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	for it.preparedStringItem.HasNext() {
		next := it.base.Next()
		isFilterPassed, err := it.filter.Check(next)
		if err != nil {
			if !isEndOfStringIterator(err) {
				err = errors.Wrap(err, "filtering iterator: check")
			}
			it.err = err
			return false
		}

		if !isFilterPassed {
			continue
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// StringFiltering sets filter while iterating over items.
// If filters is empty, so all items will return.
func StringFiltering(items StringIterator, filters ...StringChecker) StringIterator {
	if items == nil {
		return EmptyStringIterator
	}
	return &FilteringStringIterator{preparedStringItem{base: items}, AllString(filters...)}
}

func StringFilter(items StringIterator, checker ...StringChecker) error {
	// no error wrapping since no additional context for the error; just return it.
	return StringDiscard(StringFiltering(items, checker...))
}

type StringEnumChecker interface {
	// It is suggested to return EndOfStringIterator to stop iteration.
	Check(int, string) (bool, error)
}

type StringEnumCheck func(int, string) (bool, error)

func (ch StringEnumCheck) Check(n int, item string) (bool, error) { return ch(n, item) }

type enumFromStringChecker struct {
	StringChecker
}

func (ch enumFromStringChecker) Check(_ int, item string) (bool, error) {
	return ch.StringChecker.Check(item)
}

func EnumFromStringChecker(checker StringChecker) StringEnumChecker {
	return &enumFromStringChecker{checker}
}

var (
	AlwaysStringEnumCheckTrue  = EnumFromStringChecker(AlwaysStringCheckTrue)
	AlwaysStringEnumCheckFalse = EnumFromStringChecker(AlwaysStringCheckFalse)
)

func EnumNotString(checker StringEnumChecker) StringEnumChecker {
	if checker == nil {
		return AlwaysStringEnumCheckTrue
	}
	return StringEnumCheck(func(n int, item string) (bool, error) {
		yes, err := checker.Check(n, item)
		if err != nil {
			// No error wrapping since an error context is missing.
			return false, err
		}

		return !yes, nil
	})
}

type enumAndString struct {
	lhs, rhs StringEnumChecker
}

func (a enumAndString) Check(n int, item string) (bool, error) {
	isLHSPassed, err := a.lhs.Check(n, item)
	if err != nil {
		return false, wrapIfNotEndOfStringIterator(err, "lhs check")
	}
	if !isLHSPassed {
		return false, nil
	}

	isRHSPassed, err := a.rhs.Check(n, item)
	if err != nil {
		return false, wrapIfNotEndOfStringIterator(err, "rhs check")
	}
	return isRHSPassed, nil
}

func EnumAllString(checkers ...StringEnumChecker) StringEnumChecker {
	var all StringEnumChecker = AlwaysStringEnumCheckTrue
	for i := len(checkers) - 1; i >= 0; i-- {
		if checkers[i] == nil {
			continue
		}
		all = enumAndString{checkers[i], all}
	}
	return all
}

type enumOrString struct {
	lhs, rhs StringEnumChecker
}

func (o enumOrString) Check(n int, item string) (bool, error) {
	isLHSPassed, err := o.lhs.Check(n, item)
	if err != nil {
		return false, wrapIfNotEndOfStringIterator(err, "lhs check")
	}
	if isLHSPassed {
		return true, nil
	}

	isRHSPassed, err := o.rhs.Check(n, item)
	if err != nil {
		return false, wrapIfNotEndOfStringIterator(err, "rhs check")
	}
	return isRHSPassed, nil
}

func EnumAnyString(checkers ...StringEnumChecker) StringEnumChecker {
	var any StringEnumChecker = AlwaysStringEnumCheckFalse
	for i := len(checkers) - 1; i >= 0; i-- {
		if checkers[i] == nil {
			continue
		}
		any = enumOrString{checkers[i], any}
	}
	return any
}

type EnumFilteringStringIterator struct {
	preparedStringItem
	filter StringEnumChecker
	count  int
}

func (it *EnumFilteringStringIterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	for it.preparedStringItem.HasNext() {
		next := it.base.Next()
		isFilterPassed, err := it.filter.Check(it.count, next)
		if err != nil {
			if !isEndOfStringIterator(err) {
				err = errors.Wrap(err, "enum filtering iterator: check")
			}
			it.err = err
			return false
		}
		it.count++

		if !isFilterPassed {
			continue
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// StringEnumFiltering sets filter while iterating over items and their serial numbers.
// If filters is empty, so all items will return.
func StringEnumFiltering(items StringIterator, filters ...StringEnumChecker) StringIterator {
	if items == nil {
		return EmptyStringIterator
	}
	return &EnumFilteringStringIterator{preparedStringItem{base: items}, EnumAllString(filters...), 0}
}

type DoingUntilStringIterator struct {
	preparedStringItem
	until StringChecker
}

func (it *DoingUntilStringIterator) HasNext() bool {
	if it.hasNext {
		return true
	}
	for it.preparedStringItem.HasNext() {
		next := it.base.Next()
		isUntilPassed, err := it.until.Check(next)
		if err != nil {
			if !isEndOfStringIterator(err) {
				err = errors.Wrap(err, "doing until iterator: until")
			}
			it.err = err
			return false
		}

		if isUntilPassed {
			it.err = EndOfStringIterator
		}

		it.hasNext = true
		it.next = next
		return true
	}

	return false
}

// StringDoingUntil sets until checker while iterating over items.
// If untilList is empty, so all items returned as is.
func StringDoingUntil(items StringIterator, untilList ...StringChecker) StringIterator {
	if items == nil {
		return EmptyStringIterator
	}
	return &DoingUntilStringIterator{preparedStringItem{base: items}, AllString(untilList...)}
}

func StringDoUntil(items StringIterator, untilList ...StringChecker) error {
	// no error wrapping since no additional context for the error; just return it.
	return StringDiscard(StringDoingUntil(items, untilList...))
}

// StringGettingBatch returns the next batch from items.
func StringGettingBatch(items StringIterator, batchSize int) StringIterator {
	if items == nil {
		return EmptyStringIterator
	}
	if batchSize == 0 {
		return items
	}

	size := 0
	return StringDoingUntil(items, StringCheck(func(item string) (bool, error) {
		size++
		return size >= batchSize, nil
	}))
}
